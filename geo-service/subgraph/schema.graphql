"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!

  """Reads and enables pagination through a set of `GeoEntity`."""
  geoEntitiesByCreatedById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeoEntity`."""
    orderBy: [GeoEntitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeoEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection!

  """Reads and enables pagination through a set of `OnchainProfile`."""
  onchainProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OnchainProfile`."""
    orderBy: [OnchainProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OnchainProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OnchainProfileFilter
  ): OnchainProfilesConnection!

  """Reads and enables pagination through a set of `LogEntry`."""
  logEntriesByCreatedById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogEntryFilter
  ): LogEntriesConnection!

  """Reads and enables pagination through a set of `Proposal`."""
  proposalsByCreatedById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Proposal`."""
    orderBy: [ProposalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalFilter
  ): ProposalsConnection!

  """Reads and enables pagination through a set of `ProposedVersion`."""
  proposedVersionsByCreatedById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposedVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposedVersionFilter
  ): ProposedVersionsConnection!

  """Reads and enables pagination through a set of `SpaceAdmin`."""
  spaceAdmins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceAdmin`."""
    orderBy: [SpaceAdminsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceAdminCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceAdminFilter
  ): SpaceAdminsConnection!

  """Reads and enables pagination through a set of `SpaceEditor`."""
  spaceEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditor`."""
    orderBy: [SpaceEditorsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorFilter
  ): SpaceEditorsConnection!

  """Reads and enables pagination through a set of `SpaceEditorsV2`."""
  spaceEditorsV2s(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditorsV2`."""
    orderBy: [SpaceEditorsV2sOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorsV2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorsV2Filter
  ): SpaceEditorsV2sConnection!

  """Reads and enables pagination through a set of `SpaceEditorController`."""
  spaceEditorControllers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditorController`."""
    orderBy: [SpaceEditorControllersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorControllerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorControllerFilter
  ): SpaceEditorControllersConnection!

  """Reads and enables pagination through a set of `Version`."""
  versionsByCreatedById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VersionFilter
  ): VersionsConnection!

  """Reads and enables pagination through a set of `ProposalVote`."""
  proposalVotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalVoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalVoteFilter
  ): ProposalVotesConnection!

  """Reads and enables pagination through a set of `GeoEntity`."""
  geoProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection!
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’
"""
input AccountFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `geoEntitiesByCreatedById` relation."""
  geoEntitiesByCreatedById: AccountToManyGeoEntityFilter

  """Some related `geoEntitiesByCreatedById` exist."""
  geoEntitiesByCreatedByIdExist: Boolean

  """Filter by the object’s `onchainProfiles` relation."""
  onchainProfiles: AccountToManyOnchainProfileFilter

  """Some related `onchainProfiles` exist."""
  onchainProfilesExist: Boolean

  """Filter by the object’s `logEntriesByCreatedById` relation."""
  logEntriesByCreatedById: AccountToManyLogEntryFilter

  """Some related `logEntriesByCreatedById` exist."""
  logEntriesByCreatedByIdExist: Boolean

  """Filter by the object’s `proposalsByCreatedById` relation."""
  proposalsByCreatedById: AccountToManyProposalFilter

  """Some related `proposalsByCreatedById` exist."""
  proposalsByCreatedByIdExist: Boolean

  """Filter by the object’s `proposedVersionsByCreatedById` relation."""
  proposedVersionsByCreatedById: AccountToManyProposedVersionFilter

  """Some related `proposedVersionsByCreatedById` exist."""
  proposedVersionsByCreatedByIdExist: Boolean

  """Filter by the object’s `spaceAdmins` relation."""
  spaceAdmins: AccountToManySpaceAdminFilter

  """Some related `spaceAdmins` exist."""
  spaceAdminsExist: Boolean

  """Filter by the object’s `spaceEditors` relation."""
  spaceEditors: AccountToManySpaceEditorFilter

  """Some related `spaceEditors` exist."""
  spaceEditorsExist: Boolean

  """Filter by the object’s `spaceEditorsV2s` relation."""
  spaceEditorsV2s: AccountToManySpaceEditorsV2Filter

  """Some related `spaceEditorsV2s` exist."""
  spaceEditorsV2sExist: Boolean

  """Filter by the object’s `spaceEditorControllers` relation."""
  spaceEditorControllers: AccountToManySpaceEditorControllerFilter

  """Some related `spaceEditorControllers` exist."""
  spaceEditorControllersExist: Boolean

  """Filter by the object’s `versionsByCreatedById` relation."""
  versionsByCreatedById: AccountToManyVersionFilter

  """Some related `versionsByCreatedById` exist."""
  versionsByCreatedByIdExist: Boolean

  """Filter by the object’s `proposalVotes` relation."""
  proposalVotes: AccountToManyProposalVoteFilter

  """Some related `proposalVotes` exist."""
  proposalVotesExist: Boolean

  """Checks for all expressions in this list."""
  and: [AccountFilter!]

  """Checks for any expressions in this list."""
  or: [AccountFilter!]

  """Negates the expression."""
  not: AccountFilter
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  id: String!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  id: String
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITIES_BY_CREATED_BY_ID__COUNT_ASC
  GEO_ENTITIES_BY_CREATED_BY_ID__COUNT_DESC
  ONCHAIN_PROFILES_BY_ACCOUNT_ID__COUNT_ASC
  ONCHAIN_PROFILES_BY_ACCOUNT_ID__COUNT_DESC
  LOG_ENTRIES_BY_CREATED_BY_ID__COUNT_ASC
  LOG_ENTRIES_BY_CREATED_BY_ID__COUNT_DESC
  PROPOSALS_BY_CREATED_BY_ID__COUNT_ASC
  PROPOSALS_BY_CREATED_BY_ID__COUNT_DESC
  PROPOSED_VERSIONS_BY_CREATED_BY_ID__COUNT_ASC
  PROPOSED_VERSIONS_BY_CREATED_BY_ID__COUNT_DESC
  SPACE_ADMINS_BY_ACCOUNT_ID__COUNT_ASC
  SPACE_ADMINS_BY_ACCOUNT_ID__COUNT_DESC
  SPACE_EDITORS_BY_ACCOUNT_ID__COUNT_ASC
  SPACE_EDITORS_BY_ACCOUNT_ID__COUNT_DESC
  SPACE_EDITORS_V2_S_BY_ACCOUNT_ID__COUNT_ASC
  SPACE_EDITORS_V2_S_BY_ACCOUNT_ID__COUNT_DESC
  SPACE_EDITOR_CONTROLLERS_BY_ACCOUNT_ID__COUNT_ASC
  SPACE_EDITOR_CONTROLLERS_BY_ACCOUNT_ID__COUNT_DESC
  VERSIONS_BY_CREATED_BY_ID__COUNT_ASC
  VERSIONS_BY_CREATED_BY_ID__COUNT_DESC
  PROPOSAL_VOTES_BY_ACCOUNT_ID__COUNT_ASC
  PROPOSAL_VOTES_BY_ACCOUNT_ID__COUNT_DESC
}

"""
A filter to be used against many `GeoEntity` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyGeoEntityFilter {
  """
  Every related `GeoEntity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GeoEntityFilter

  """
  Some related `GeoEntity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GeoEntityFilter

  """
  No related `GeoEntity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GeoEntityFilter
}

"""
A filter to be used against many `LogEntry` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyLogEntryFilter {
  """
  Every related `LogEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LogEntryFilter

  """
  Some related `LogEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LogEntryFilter

  """
  No related `LogEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LogEntryFilter
}

"""
A filter to be used against many `OnchainProfile` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyOnchainProfileFilter {
  """
  Every related `OnchainProfile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OnchainProfileFilter

  """
  Some related `OnchainProfile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OnchainProfileFilter

  """
  No related `OnchainProfile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OnchainProfileFilter
}

"""
A filter to be used against many `Proposal` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyProposalFilter {
  """
  Every related `Proposal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposalFilter

  """
  Some related `Proposal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposalFilter

  """
  No related `Proposal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposalFilter
}

"""
A filter to be used against many `ProposalVote` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyProposalVoteFilter {
  """
  Every related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposalVoteFilter

  """
  Some related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposalVoteFilter

  """
  No related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposalVoteFilter
}

"""
A filter to be used against many `ProposedVersion` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyProposedVersionFilter {
  """
  Every related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposedVersionFilter

  """
  Some related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposedVersionFilter

  """
  No related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposedVersionFilter
}

"""
A filter to be used against many `SpaceAdmin` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManySpaceAdminFilter {
  """
  Every related `SpaceAdmin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceAdminFilter

  """
  Some related `SpaceAdmin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceAdminFilter

  """
  No related `SpaceAdmin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceAdminFilter
}

"""
A filter to be used against many `SpaceEditorController` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManySpaceEditorControllerFilter {
  """
  Every related `SpaceEditorController` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceEditorControllerFilter

  """
  Some related `SpaceEditorController` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceEditorControllerFilter

  """
  No related `SpaceEditorController` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceEditorControllerFilter
}

"""
A filter to be used against many `SpaceEditor` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManySpaceEditorFilter {
  """
  Every related `SpaceEditor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceEditorFilter

  """
  Some related `SpaceEditor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceEditorFilter

  """
  No related `SpaceEditor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceEditorFilter
}

"""
A filter to be used against many `SpaceEditorsV2` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManySpaceEditorsV2Filter {
  """
  Every related `SpaceEditorsV2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceEditorsV2Filter

  """
  Some related `SpaceEditorsV2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceEditorsV2Filter

  """
  No related `SpaceEditorsV2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceEditorsV2Filter
}

"""
A filter to be used against many `Version` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyVersionFilter {
  """
  Every related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: VersionFilter

  """
  Some related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: VersionFilter

  """
  No related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: VersionFilter
}

type Action implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  actionType: String!
  entityId: String!
  attributeId: String!
  valueType: String
  valueId: String
  numberValue: String
  stringValue: String
  entityValueId: String
  arrayValue: [String]
  proposedVersionId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entityValue: GeoEntity

  """Reads a single `ProposedVersion` that is related to this `Action`."""
  proposedVersion: ProposedVersion
}

"""
A condition to be used against `Action` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ActionCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `actionType` field."""
  actionType: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String

  """Checks for equality with the object’s `attributeId` field."""
  attributeId: String

  """Checks for equality with the object’s `valueType` field."""
  valueType: String

  """Checks for equality with the object’s `valueId` field."""
  valueId: String

  """Checks for equality with the object’s `numberValue` field."""
  numberValue: String

  """Checks for equality with the object’s `stringValue` field."""
  stringValue: String

  """Checks for equality with the object’s `entityValueId` field."""
  entityValueId: String

  """Checks for equality with the object’s `arrayValue` field."""
  arrayValue: [String]

  """Checks for equality with the object’s `proposedVersionId` field."""
  proposedVersionId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `Action` object types. All fields are combined with a logical ‘and.’
"""
input ActionFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `actionType` field."""
  actionType: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `attributeId` field."""
  attributeId: StringFilter

  """Filter by the object’s `valueType` field."""
  valueType: StringFilter

  """Filter by the object’s `valueId` field."""
  valueId: StringFilter

  """Filter by the object’s `numberValue` field."""
  numberValue: StringFilter

  """Filter by the object’s `stringValue` field."""
  stringValue: StringFilter

  """Filter by the object’s `entityValueId` field."""
  entityValueId: StringFilter

  """Filter by the object’s `arrayValue` field."""
  arrayValue: StringListFilter

  """Filter by the object’s `proposedVersionId` field."""
  proposedVersionId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Filter by the object’s `attribute` relation."""
  attribute: GeoEntityFilter

  """Filter by the object’s `entityValue` relation."""
  entityValue: GeoEntityFilter

  """A related `entityValue` exists."""
  entityValueExists: Boolean

  """Filter by the object’s `proposedVersion` relation."""
  proposedVersion: ProposedVersionFilter

  """Checks for all expressions in this list."""
  and: [ActionFilter!]

  """Checks for any expressions in this list."""
  or: [ActionFilter!]

  """Negates the expression."""
  not: ActionFilter
}

"""An input for mutations affecting `Action`"""
input ActionInput {
  id: String!
  actionType: String!
  entityId: String!
  attributeId: String!
  valueType: String
  valueId: String
  numberValue: String
  stringValue: String
  entityValueId: String
  arrayValue: [String]
  proposedVersionId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `Action`. Fields that are set will be updated.
"""
input ActionPatch {
  id: String
  actionType: String
  entityId: String
  attributeId: String
  valueType: String
  valueId: String
  numberValue: String
  stringValue: String
  entityValueId: String
  arrayValue: [String]
  proposedVersionId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `Action` values."""
type ActionsConnection {
  """A list of `Action` objects."""
  nodes: [Action]!

  """
  A list of edges which contains the `Action` and cursor to aid in pagination.
  """
  edges: [ActionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Action` you could get from the connection."""
  totalCount: Int!
}

"""A `Action` edge in the connection."""
type ActionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Action` at the end of the edge."""
  node: Action
}

"""Methods to use when ordering `Action`."""
enum ActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACTION_TYPE_ASC
  ACTION_TYPE_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  VALUE_TYPE_ASC
  VALUE_TYPE_DESC
  VALUE_ID_ASC
  VALUE_ID_DESC
  NUMBER_VALUE_ASC
  NUMBER_VALUE_DESC
  STRING_VALUE_ASC
  STRING_VALUE_DESC
  ENTITY_VALUE_ID_ASC
  ENTITY_VALUE_ID_DESC
  ARRAY_VALUE_ASC
  ARRAY_VALUE_DESC
  PROPOSED_VERSION_ID_ASC
  PROPOSED_VERSION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__ID_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__ID_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__NAME_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__NAME_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_BLOCK_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__NAME_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__NAME_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__DESCRIPTION_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__DESCRIPTION_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_BLOCK_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_BLOCK_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_BY_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_BY_ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ENTITY_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ENTITY_ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__PROPOSAL_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__PROPOSAL_ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__SPACE_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__SPACE_ID_DESC
}

"""
A filter to be used against `AttributeWithRelationValueType` object types. All fields are combined with a logical ‘and.’
"""
input AttributeWithRelationValueTypeFilter {
  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `entityValueId` field."""
  entityValueId: StringFilter

  """Filter by the object’s `entityValue` relation."""
  entityValue: GeoEntityFilter

  """A related `entityValue` exists."""
  entityValueExists: Boolean

  """Checks for all expressions in this list."""
  and: [AttributeWithRelationValueTypeFilter!]

  """Checks for any expressions in this list."""
  or: [AttributeWithRelationValueTypeFilter!]

  """Negates the expression."""
  not: AttributeWithRelationValueTypeFilter
}

"""
A filter to be used against `AttributeWithUnknownValueType` object types. All fields are combined with a logical ‘and.’
"""
input AttributeWithUnknownValueTypeFilter {
  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `value` field."""
  value: StringFilter

  """Filter by the object’s `entityValueId` field."""
  entityValueId: StringFilter

  """Filter by the object’s `entityValue` relation."""
  entityValue: GeoEntityFilter

  """A related `entityValue` exists."""
  entityValueExists: Boolean

  """Checks for all expressions in this list."""
  and: [AttributeWithUnknownValueTypeFilter!]

  """Checks for any expressions in this list."""
  or: [AttributeWithUnknownValueTypeFilter!]

  """Negates the expression."""
  not: AttributeWithUnknownValueTypeFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

type Collection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  entityId: String!

  """Reads a single `GeoEntity` that is related to this `Collection`."""
  entity: GeoEntity

  """Reads and enables pagination through a set of `Triple`."""
  triplesByCollectionValueId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleFilter
  ): TriplesConnection!

  """Reads and enables pagination through a set of `CollectionItem`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionItemFilter
  ): CollectionItemsConnection!
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String
}

"""
A filter to be used against `Collection` object types. All fields are combined with a logical ‘and.’
"""
input CollectionFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `triplesByCollectionValueId` relation."""
  triplesByCollectionValueId: CollectionToManyTripleFilter

  """Some related `triplesByCollectionValueId` exist."""
  triplesByCollectionValueIdExist: Boolean

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Checks for all expressions in this list."""
  and: [CollectionFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionFilter!]

  """Negates the expression."""
  not: CollectionFilter
}

"""An input for mutations affecting `Collection`"""
input CollectionInput {
  id: String!
  entityId: String!
}

type CollectionItem {
  entityId: String
  collectionId: String

  """Reads a single `GeoEntity` that is related to this `CollectionItem`."""
  entity: GeoEntity
}

"""
A filter to be used against `CollectionItem` object types. All fields are combined with a logical ‘and.’
"""
input CollectionItemFilter {
  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `collectionId` field."""
  collectionId: StringFilter

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """A related `entity` exists."""
  entityExists: Boolean

  """Checks for all expressions in this list."""
  and: [CollectionItemFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionItemFilter!]

  """Negates the expression."""
  not: CollectionItemFilter
}

"""A connection to a list of `CollectionItem` values."""
type CollectionItemsConnection {
  """A list of `CollectionItem` objects."""
  nodes: [CollectionItem]!

  """
  A list of edges which contains the `CollectionItem` and cursor to aid in pagination.
  """
  edges: [CollectionItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CollectionItem` you could get from the connection."""
  totalCount: Int!
}

"""A `CollectionItem` edge in the connection."""
type CollectionItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionItem` at the end of the edge."""
  node: CollectionItem
}

"""
Represents an update to a `Collection`. Fields that are set will be updated.
"""
input CollectionPatch {
  id: String
  entityId: String
}

"""A connection to a list of `Collection` values."""
type CollectionsConnection {
  """A list of `Collection` objects."""
  nodes: [Collection]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Collection` at the end of the edge."""
  node: Collection
}

"""Methods to use when ordering `Collection`."""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  TRIPLES_BY_COLLECTION_VALUE_ID__COUNT_ASC
  TRIPLES_BY_COLLECTION_VALUE_ID__COUNT_DESC
}

"""
A filter to be used against many `Triple` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyTripleFilter {
  """
  Every related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TripleFilter

  """
  Some related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TripleFilter

  """
  No related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TripleFilter
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the create `Action` mutation."""
input CreateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Action` to be created by this mutation."""
  action: ActionInput!
}

"""The output of our create `Action` mutation."""
type CreateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was created by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entityValue: GeoEntity

  """Reads a single `ProposedVersion` that is related to this `Action`."""
  proposedVersion: ProposedVersion

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the create `Collection` mutation."""
input CreateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Collection` to be created by this mutation."""
  collection: CollectionInput!
}

"""The output of our create `Collection` mutation."""
type CreateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was created by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Collection`."""
  entity: GeoEntity

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""All input for the create `GeoEntity` mutation."""
input CreateGeoEntityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GeoEntity` to be created by this mutation."""
  geoEntity: GeoEntityInput!
}

"""The output of our create `GeoEntity` mutation."""
type CreateGeoEntityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoEntity` that was created by this mutation."""
  geoEntity: GeoEntity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `GeoEntity`."""
  createdBy: Account

  """An edge for our `GeoEntity`. May be used by Relay 1."""
  geoEntityEdge(
    """The method to use when ordering `GeoEntity`."""
    orderBy: [GeoEntitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoEntitiesEdge
}

"""All input for the create `GeoEntityType` mutation."""
input CreateGeoEntityTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GeoEntityType` to be created by this mutation."""
  geoEntityType: GeoEntityTypeInput!
}

"""The output of our create `GeoEntityType` mutation."""
type CreateGeoEntityTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoEntityType` that was created by this mutation."""
  geoEntityType: GeoEntityType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  type: GeoEntity

  """An edge for our `GeoEntityType`. May be used by Relay 1."""
  geoEntityTypeEdge(
    """The method to use when ordering `GeoEntityType`."""
    orderBy: [GeoEntityTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoEntityTypesEdge
}

"""All input for the create `LogEntry` mutation."""
input CreateLogEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LogEntry` to be created by this mutation."""
  logEntry: LogEntryInput!
}

"""The output of our create `LogEntry` mutation."""
type CreateLogEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogEntry` that was created by this mutation."""
  logEntry: LogEntry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `LogEntry`."""
  createdBy: Account

  """Reads a single `Space` that is related to this `LogEntry`."""
  space: Space

  """An edge for our `LogEntry`. May be used by Relay 1."""
  logEntryEdge(
    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogEntriesEdge
}

"""All input for the create `OnchainProfile` mutation."""
input CreateOnchainProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OnchainProfile` to be created by this mutation."""
  onchainProfile: OnchainProfileInput!
}

"""The output of our create `OnchainProfile` mutation."""
type CreateOnchainProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OnchainProfile` that was created by this mutation."""
  onchainProfile: OnchainProfile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `OnchainProfile`."""
  account: Account

  """Reads a single `Space` that is related to this `OnchainProfile`."""
  homeSpace: Space

  """An edge for our `OnchainProfile`. May be used by Relay 1."""
  onchainProfileEdge(
    """The method to use when ordering `OnchainProfile`."""
    orderBy: [OnchainProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OnchainProfilesEdge
}

"""All input for the create `Profile` mutation."""
input CreateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Profile` to be created by this mutation."""
  profile: ProfileInput!
}

"""The output of our create `Profile` mutation."""
type CreateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was created by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Profile`."""
  entity: GeoEntity

  """Reads a single `OnchainProfile` that is related to this `Profile`."""
  onchainProfile: OnchainProfile

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""All input for the create `Proposal` mutation."""
input CreateProposalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Proposal` to be created by this mutation."""
  proposal: ProposalInput!
}

"""The output of our create `Proposal` mutation."""
type CreateProposalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Proposal` that was created by this mutation."""
  proposal: Proposal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Proposal`."""
  space: Space

  """Reads a single `Account` that is related to this `Proposal`."""
  createdBy: Account

  """An edge for our `Proposal`. May be used by Relay 1."""
  proposalEdge(
    """The method to use when ordering `Proposal`."""
    orderBy: [ProposalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposalsEdge
}

"""All input for the create `ProposalVote` mutation."""
input CreateProposalVoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProposalVote` to be created by this mutation."""
  proposalVote: ProposalVoteInput!
}

"""The output of our create `ProposalVote` mutation."""
type CreateProposalVotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposalVote` that was created by this mutation."""
  proposalVote: ProposalVote

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Proposal` that is related to this `ProposalVote`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposalVote`."""
  space: Space

  """Reads a single `Account` that is related to this `ProposalVote`."""
  account: Account

  """An edge for our `ProposalVote`. May be used by Relay 1."""
  proposalVoteEdge(
    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposalVotesEdge
}

"""All input for the create `ProposedVersion` mutation."""
input CreateProposedVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProposedVersion` to be created by this mutation."""
  proposedVersion: ProposedVersionInput!
}

"""The output of our create `ProposedVersion` mutation."""
type CreateProposedVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposedVersion` that was created by this mutation."""
  proposedVersion: ProposedVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `ProposedVersion`."""
  createdBy: Account

  """Reads a single `GeoEntity` that is related to this `ProposedVersion`."""
  entity: GeoEntity

  """Reads a single `Proposal` that is related to this `ProposedVersion`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposedVersion`."""
  space: Space

  """An edge for our `ProposedVersion`. May be used by Relay 1."""
  proposedVersionEdge(
    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposedVersionsEdge
}

"""All input for the create `SpaceAdmin` mutation."""
input CreateSpaceAdminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpaceAdmin` to be created by this mutation."""
  spaceAdmin: SpaceAdminInput!
}

"""The output of our create `SpaceAdmin` mutation."""
type CreateSpaceAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceAdmin` that was created by this mutation."""
  spaceAdmin: SpaceAdmin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceAdmin`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceAdmin`."""
  account: Account

  """An edge for our `SpaceAdmin`. May be used by Relay 1."""
  spaceAdminEdge(
    """The method to use when ordering `SpaceAdmin`."""
    orderBy: [SpaceAdminsOrderBy!] = [NATURAL]
  ): SpaceAdminsEdge
}

"""All input for the create `SpaceEditorController` mutation."""
input CreateSpaceEditorControllerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpaceEditorController` to be created by this mutation."""
  spaceEditorController: SpaceEditorControllerInput!
}

"""The output of our create `SpaceEditorController` mutation."""
type CreateSpaceEditorControllerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditorController` that was created by this mutation."""
  spaceEditorController: SpaceEditorController

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Space` that is related to this `SpaceEditorController`.
  """
  space: Space

  """
  Reads a single `Account` that is related to this `SpaceEditorController`.
  """
  account: Account

  """An edge for our `SpaceEditorController`. May be used by Relay 1."""
  spaceEditorControllerEdge(
    """The method to use when ordering `SpaceEditorController`."""
    orderBy: [SpaceEditorControllersOrderBy!] = [NATURAL]
  ): SpaceEditorControllersEdge
}

"""All input for the create `SpaceEditor` mutation."""
input CreateSpaceEditorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpaceEditor` to be created by this mutation."""
  spaceEditor: SpaceEditorInput!
}

"""The output of our create `SpaceEditor` mutation."""
type CreateSpaceEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditor` that was created by this mutation."""
  spaceEditor: SpaceEditor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceEditor`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditor`."""
  account: Account

  """An edge for our `SpaceEditor`. May be used by Relay 1."""
  spaceEditorEdge(
    """The method to use when ordering `SpaceEditor`."""
    orderBy: [SpaceEditorsOrderBy!] = [NATURAL]
  ): SpaceEditorsEdge
}

"""All input for the create `SpaceEditorsV2` mutation."""
input CreateSpaceEditorsV2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpaceEditorsV2` to be created by this mutation."""
  spaceEditorsV2: SpaceEditorsV2Input!
}

"""The output of our create `SpaceEditorsV2` mutation."""
type CreateSpaceEditorsV2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditorsV2` that was created by this mutation."""
  spaceEditorsV2: SpaceEditorsV2

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceEditorsV2`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditorsV2`."""
  account: Account

  """An edge for our `SpaceEditorsV2`. May be used by Relay 1."""
  spaceEditorsV2Edge(
    """The method to use when ordering `SpaceEditorsV2`."""
    orderBy: [SpaceEditorsV2sOrderBy!] = [NATURAL]
  ): SpaceEditorsV2sEdge
}

"""All input for the create `Space` mutation."""
input CreateSpaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Space` to be created by this mutation."""
  space: SpaceInput!
}

"""The output of our create `Space` mutation."""
type CreateSpacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Space` that was created by this mutation."""
  space: Space

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Space`."""
  configuration: GeoEntity

  """An edge for our `Space`. May be used by Relay 1."""
  spaceEdge(
    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesEdge
}

"""All input for the create `Subspace` mutation."""
input CreateSubspaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Subspace` to be created by this mutation."""
  subspace: SubspaceInput!
}

"""The output of our create `Subspace` mutation."""
type CreateSubspacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Subspace` that was created by this mutation."""
  subspace: Subspace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Subspace`."""
  parentSpace: Space

  """Reads a single `Space` that is related to this `Subspace`."""
  childSpace: Space

  """An edge for our `Subspace`. May be used by Relay 1."""
  subspaceEdge(
    """The method to use when ordering `Subspace`."""
    orderBy: [SubspacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubspacesEdge
}

"""All input for the create `SubstreamCursor` mutation."""
input CreateSubstreamCursorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SubstreamCursor` to be created by this mutation."""
  substreamCursor: SubstreamCursorInput!
}

"""The output of our create `SubstreamCursor` mutation."""
type CreateSubstreamCursorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubstreamCursor` that was created by this mutation."""
  substreamCursor: SubstreamCursor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SubstreamCursor`. May be used by Relay 1."""
  substreamCursorEdge(
    """The method to use when ordering `SubstreamCursor`."""
    orderBy: [SubstreamCursorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubstreamCursorsEdge
}

"""All input for the create `Triple` mutation."""
input CreateTripleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Triple` to be created by this mutation."""
  triple: TripleInput!
}

"""The output of our create `Triple` mutation."""
type CreateTriplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Triple` that was created by this mutation."""
  triple: Triple

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entityValue: GeoEntity

  """Reads a single `Space` that is related to this `Triple`."""
  space: Space

  """Reads a single `Collection` that is related to this `Triple`."""
  collectionValue: Collection

  """An edge for our `Triple`. May be used by Relay 1."""
  tripleEdge(
    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TriplesEdge
}

"""All input for the create `TripleVersion` mutation."""
input CreateTripleVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TripleVersion` to be created by this mutation."""
  tripleVersion: TripleVersionInput!
}

"""The output of our create `TripleVersion` mutation."""
type CreateTripleVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TripleVersion` that was created by this mutation."""
  tripleVersion: TripleVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Triple` that is related to this `TripleVersion`."""
  triple: Triple

  """Reads a single `Version` that is related to this `TripleVersion`."""
  version: Version

  """An edge for our `TripleVersion`. May be used by Relay 1."""
  tripleVersionEdge(
    """The method to use when ordering `TripleVersion`."""
    orderBy: [TripleVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TripleVersionsEdge
}

"""All input for the create `Version` mutation."""
input CreateVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Version` to be created by this mutation."""
  version: VersionInput!
}

"""The output of our create `Version` mutation."""
type CreateVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Version` that was created by this mutation."""
  version: Version

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `Version`."""
  createdBy: Account

  """Reads a single `ProposedVersion` that is related to this `Version`."""
  proposedVersion: ProposedVersion

  """Reads a single `GeoEntity` that is related to this `Version`."""
  entity: GeoEntity

  """Reads a single `Space` that is related to this `Version`."""
  space: Space

  """An edge for our `Version`. May be used by Relay 1."""
  versionEdge(
    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VersionsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteAccountByNodeId` mutation."""
input DeleteAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `deleteActionByNodeId` mutation."""
input DeleteActionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAction` mutation."""
input DeleteActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Action` mutation."""
type DeleteActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was deleted by this mutation."""
  action: Action
  deletedActionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entityValue: GeoEntity

  """Reads a single `ProposedVersion` that is related to this `Action`."""
  proposedVersion: ProposedVersion

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the `deleteCollectionByNodeId` mutation."""
input DeleteCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCollection` mutation."""
input DeleteCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Collection` mutation."""
type DeleteCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was deleted by this mutation."""
  collection: Collection
  deletedCollectionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Collection`."""
  entity: GeoEntity

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""All input for the `deleteGeoEntityByNodeId` mutation."""
input DeleteGeoEntityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeoEntity` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGeoEntity` mutation."""
input DeleteGeoEntityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `GeoEntity` mutation."""
type DeleteGeoEntityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoEntity` that was deleted by this mutation."""
  geoEntity: GeoEntity
  deletedGeoEntityNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `GeoEntity`."""
  createdBy: Account

  """An edge for our `GeoEntity`. May be used by Relay 1."""
  geoEntityEdge(
    """The method to use when ordering `GeoEntity`."""
    orderBy: [GeoEntitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoEntitiesEdge
}

"""All input for the `deleteGeoEntityTypeByEntityIdAndTypeId` mutation."""
input DeleteGeoEntityTypeByEntityIdAndTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  entityId: String!
  typeId: String!
}

"""All input for the `deleteGeoEntityTypeByNodeId` mutation."""
input DeleteGeoEntityTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeoEntityType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGeoEntityType` mutation."""
input DeleteGeoEntityTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `GeoEntityType` mutation."""
type DeleteGeoEntityTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoEntityType` that was deleted by this mutation."""
  geoEntityType: GeoEntityType
  deletedGeoEntityTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  type: GeoEntity

  """An edge for our `GeoEntityType`. May be used by Relay 1."""
  geoEntityTypeEdge(
    """The method to use when ordering `GeoEntityType`."""
    orderBy: [GeoEntityTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoEntityTypesEdge
}

"""All input for the `deleteLogEntryByNodeId` mutation."""
input DeleteLogEntryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LogEntry` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLogEntry` mutation."""
input DeleteLogEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `LogEntry` mutation."""
type DeleteLogEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogEntry` that was deleted by this mutation."""
  logEntry: LogEntry
  deletedLogEntryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `LogEntry`."""
  createdBy: Account

  """Reads a single `Space` that is related to this `LogEntry`."""
  space: Space

  """An edge for our `LogEntry`. May be used by Relay 1."""
  logEntryEdge(
    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogEntriesEdge
}

"""All input for the `deleteOnchainProfileByNodeId` mutation."""
input DeleteOnchainProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OnchainProfile` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOnchainProfile` mutation."""
input DeleteOnchainProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `OnchainProfile` mutation."""
type DeleteOnchainProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OnchainProfile` that was deleted by this mutation."""
  onchainProfile: OnchainProfile
  deletedOnchainProfileNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `OnchainProfile`."""
  account: Account

  """Reads a single `Space` that is related to this `OnchainProfile`."""
  homeSpace: Space

  """An edge for our `OnchainProfile`. May be used by Relay 1."""
  onchainProfileEdge(
    """The method to use when ordering `OnchainProfile`."""
    orderBy: [OnchainProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OnchainProfilesEdge
}

"""All input for the `deleteProfileByNodeId` mutation."""
input DeleteProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProfile` mutation."""
input DeleteProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Profile` mutation."""
type DeleteProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was deleted by this mutation."""
  profile: Profile
  deletedProfileNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Profile`."""
  entity: GeoEntity

  """Reads a single `OnchainProfile` that is related to this `Profile`."""
  onchainProfile: OnchainProfile

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""All input for the `deleteProposalByNodeId` mutation."""
input DeleteProposalByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Proposal` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProposal` mutation."""
input DeleteProposalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Proposal` mutation."""
type DeleteProposalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Proposal` that was deleted by this mutation."""
  proposal: Proposal
  deletedProposalNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Proposal`."""
  space: Space

  """Reads a single `Account` that is related to this `Proposal`."""
  createdBy: Account

  """An edge for our `Proposal`. May be used by Relay 1."""
  proposalEdge(
    """The method to use when ordering `Proposal`."""
    orderBy: [ProposalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposalsEdge
}

"""All input for the `deleteProposalVoteByNodeId` mutation."""
input DeleteProposalVoteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProposalVote` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProposalVote` mutation."""
input DeleteProposalVoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  onchainProposalId: String!
  spaceId: String!
  accountId: String!
}

"""The output of our delete `ProposalVote` mutation."""
type DeleteProposalVotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposalVote` that was deleted by this mutation."""
  proposalVote: ProposalVote
  deletedProposalVoteNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Proposal` that is related to this `ProposalVote`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposalVote`."""
  space: Space

  """Reads a single `Account` that is related to this `ProposalVote`."""
  account: Account

  """An edge for our `ProposalVote`. May be used by Relay 1."""
  proposalVoteEdge(
    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposalVotesEdge
}

"""All input for the `deleteProposedVersionByNodeId` mutation."""
input DeleteProposedVersionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProposedVersion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProposedVersion` mutation."""
input DeleteProposedVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `ProposedVersion` mutation."""
type DeleteProposedVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposedVersion` that was deleted by this mutation."""
  proposedVersion: ProposedVersion
  deletedProposedVersionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `ProposedVersion`."""
  createdBy: Account

  """Reads a single `GeoEntity` that is related to this `ProposedVersion`."""
  entity: GeoEntity

  """Reads a single `Proposal` that is related to this `ProposedVersion`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposedVersion`."""
  space: Space

  """An edge for our `ProposedVersion`. May be used by Relay 1."""
  proposedVersionEdge(
    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposedVersionsEdge
}

"""All input for the `deleteSpaceAdminByAccountIdAndSpaceId` mutation."""
input DeleteSpaceAdminByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: String!
  spaceId: String!
}

"""The output of our delete `SpaceAdmin` mutation."""
type DeleteSpaceAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceAdmin` that was deleted by this mutation."""
  spaceAdmin: SpaceAdmin
  deletedSpaceAdminNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceAdmin`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceAdmin`."""
  account: Account

  """An edge for our `SpaceAdmin`. May be used by Relay 1."""
  spaceAdminEdge(
    """The method to use when ordering `SpaceAdmin`."""
    orderBy: [SpaceAdminsOrderBy!] = [NATURAL]
  ): SpaceAdminsEdge
}

"""All input for the `deleteSpaceByNodeId` mutation."""
input DeleteSpaceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Space` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSpaceEditorByAccountIdAndSpaceId` mutation."""
input DeleteSpaceEditorByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: String!
  spaceId: String!
}

"""
All input for the `deleteSpaceEditorControllerByAccountIdAndSpaceId` mutation.
"""
input DeleteSpaceEditorControllerByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: String!
  spaceId: String!
}

"""The output of our delete `SpaceEditorController` mutation."""
type DeleteSpaceEditorControllerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditorController` that was deleted by this mutation."""
  spaceEditorController: SpaceEditorController
  deletedSpaceEditorControllerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Space` that is related to this `SpaceEditorController`.
  """
  space: Space

  """
  Reads a single `Account` that is related to this `SpaceEditorController`.
  """
  account: Account

  """An edge for our `SpaceEditorController`. May be used by Relay 1."""
  spaceEditorControllerEdge(
    """The method to use when ordering `SpaceEditorController`."""
    orderBy: [SpaceEditorControllersOrderBy!] = [NATURAL]
  ): SpaceEditorControllersEdge
}

"""The output of our delete `SpaceEditor` mutation."""
type DeleteSpaceEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditor` that was deleted by this mutation."""
  spaceEditor: SpaceEditor
  deletedSpaceEditorNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceEditor`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditor`."""
  account: Account

  """An edge for our `SpaceEditor`. May be used by Relay 1."""
  spaceEditorEdge(
    """The method to use when ordering `SpaceEditor`."""
    orderBy: [SpaceEditorsOrderBy!] = [NATURAL]
  ): SpaceEditorsEdge
}

"""
All input for the `deleteSpaceEditorsV2ByAccountIdAndSpaceId` mutation.
"""
input DeleteSpaceEditorsV2ByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  accountId: String!
  spaceId: String!
}

"""The output of our delete `SpaceEditorsV2` mutation."""
type DeleteSpaceEditorsV2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditorsV2` that was deleted by this mutation."""
  spaceEditorsV2: SpaceEditorsV2
  deletedSpaceEditorsV2NodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceEditorsV2`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditorsV2`."""
  account: Account

  """An edge for our `SpaceEditorsV2`. May be used by Relay 1."""
  spaceEditorsV2Edge(
    """The method to use when ordering `SpaceEditorsV2`."""
    orderBy: [SpaceEditorsV2sOrderBy!] = [NATURAL]
  ): SpaceEditorsV2sEdge
}

"""All input for the `deleteSpace` mutation."""
input DeleteSpaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Space` mutation."""
type DeleteSpacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Space` that was deleted by this mutation."""
  space: Space
  deletedSpaceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Space`."""
  configuration: GeoEntity

  """An edge for our `Space`. May be used by Relay 1."""
  spaceEdge(
    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesEdge
}

"""All input for the `deleteSubspaceByNodeId` mutation."""
input DeleteSubspaceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Subspace` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSubspace` mutation."""
input DeleteSubspaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Subspace` mutation."""
type DeleteSubspacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Subspace` that was deleted by this mutation."""
  subspace: Subspace
  deletedSubspaceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Subspace`."""
  parentSpace: Space

  """Reads a single `Space` that is related to this `Subspace`."""
  childSpace: Space

  """An edge for our `Subspace`. May be used by Relay 1."""
  subspaceEdge(
    """The method to use when ordering `Subspace`."""
    orderBy: [SubspacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubspacesEdge
}

"""All input for the `deleteSubstreamCursorByNodeId` mutation."""
input DeleteSubstreamCursorByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SubstreamCursor` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSubstreamCursor` mutation."""
input DeleteSubstreamCursorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SubstreamCursor` mutation."""
type DeleteSubstreamCursorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubstreamCursor` that was deleted by this mutation."""
  substreamCursor: SubstreamCursor
  deletedCursorNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SubstreamCursor`. May be used by Relay 1."""
  substreamCursorEdge(
    """The method to use when ordering `SubstreamCursor`."""
    orderBy: [SubstreamCursorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubstreamCursorsEdge
}

"""All input for the `deleteTripleByNodeId` mutation."""
input DeleteTripleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Triple` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTriple` mutation."""
input DeleteTripleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Triple` mutation."""
type DeleteTriplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Triple` that was deleted by this mutation."""
  triple: Triple
  deletedTripleNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entityValue: GeoEntity

  """Reads a single `Space` that is related to this `Triple`."""
  space: Space

  """Reads a single `Collection` that is related to this `Triple`."""
  collectionValue: Collection

  """An edge for our `Triple`. May be used by Relay 1."""
  tripleEdge(
    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TriplesEdge
}

"""All input for the `deleteTripleVersionByNodeId` mutation."""
input DeleteTripleVersionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TripleVersion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTripleVersion` mutation."""
input DeleteTripleVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tripleId: String!
  versionId: String!
}

"""The output of our delete `TripleVersion` mutation."""
type DeleteTripleVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TripleVersion` that was deleted by this mutation."""
  tripleVersion: TripleVersion
  deletedTripleVersionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Triple` that is related to this `TripleVersion`."""
  triple: Triple

  """Reads a single `Version` that is related to this `TripleVersion`."""
  version: Version

  """An edge for our `TripleVersion`. May be used by Relay 1."""
  tripleVersionEdge(
    """The method to use when ordering `TripleVersion`."""
    orderBy: [TripleVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TripleVersionsEdge
}

"""All input for the `deleteVersionByNodeId` mutation."""
input DeleteVersionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Version` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVersion` mutation."""
input DeleteVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Version` mutation."""
type DeleteVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Version` that was deleted by this mutation."""
  version: Version
  deletedVersionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `Version`."""
  createdBy: Account

  """Reads a single `ProposedVersion` that is related to this `Version`."""
  proposedVersion: ProposedVersion

  """Reads a single `GeoEntity` that is related to this `Version`."""
  entity: GeoEntity

  """Reads a single `Space` that is related to this `Version`."""
  space: Space

  """An edge for our `Version`. May be used by Relay 1."""
  versionEdge(
    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VersionsEdge
}

"""A connection to a list of `GeoEntity` values."""
type GeoEntitiesConnection {
  """A list of `GeoEntity` objects."""
  nodes: [GeoEntity]!

  """
  A list of edges which contains the `GeoEntity` and cursor to aid in pagination.
  """
  edges: [GeoEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GeoEntity` you could get from the connection."""
  totalCount: Int!
}

"""A `GeoEntity` edge in the connection."""
type GeoEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GeoEntity` at the end of the edge."""
  node: GeoEntity
}

"""Methods to use when ordering `GeoEntity`."""
enum GeoEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ID_ASC
  CREATED_BY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_AT_BLOCK_ASC
  UPDATED_AT_BLOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ACCOUNT_BY_CREATED_BY_ID__ID_ASC
  ACCOUNT_BY_CREATED_BY_ID__ID_DESC
  SPACES_BY_CONFIGURATION_ID__COUNT_ASC
  SPACES_BY_CONFIGURATION_ID__COUNT_DESC
  GEO_ENTITY_TYPES_BY_ENTITY_ID__COUNT_ASC
  GEO_ENTITY_TYPES_BY_ENTITY_ID__COUNT_DESC
  GEO_ENTITY_TYPES_BY_TYPE_ID__COUNT_ASC
  GEO_ENTITY_TYPES_BY_TYPE_ID__COUNT_DESC
  PROFILES_BY_ENTITY_ID__COUNT_ASC
  PROFILES_BY_ENTITY_ID__COUNT_DESC
  PROPOSED_VERSIONS_BY_ENTITY_ID__COUNT_ASC
  PROPOSED_VERSIONS_BY_ENTITY_ID__COUNT_DESC
  TRIPLES_BY_ENTITY_ID__COUNT_ASC
  TRIPLES_BY_ENTITY_ID__COUNT_DESC
  TRIPLES_BY_ATTRIBUTE_ID__COUNT_ASC
  TRIPLES_BY_ATTRIBUTE_ID__COUNT_DESC
  TRIPLES_BY_ENTITY_VALUE_ID__COUNT_ASC
  TRIPLES_BY_ENTITY_VALUE_ID__COUNT_DESC
  VERSIONS_BY_ENTITY_ID__COUNT_ASC
  VERSIONS_BY_ENTITY_ID__COUNT_DESC
  ACTIONS_BY_ENTITY_ID__COUNT_ASC
  ACTIONS_BY_ENTITY_ID__COUNT_DESC
  ACTIONS_BY_ATTRIBUTE_ID__COUNT_ASC
  ACTIONS_BY_ATTRIBUTE_ID__COUNT_DESC
  ACTIONS_BY_ENTITY_VALUE_ID__COUNT_ASC
  ACTIONS_BY_ENTITY_VALUE_ID__COUNT_DESC
  COLLECTIONS_BY_ENTITY_ID__COUNT_ASC
  COLLECTIONS_BY_ENTITY_ID__COUNT_DESC
  ATTRIBUTE_WITH_RELATION_VALUE_TYPES_BY_ENTITY_VALUE_ID__COUNT_ASC
  ATTRIBUTE_WITH_RELATION_VALUE_TYPES_BY_ENTITY_VALUE_ID__COUNT_DESC
  ATTRIBUTE_WITH_UNKNOWN_VALUE_TYPES_BY_ENTITY_VALUE_ID__COUNT_ASC
  ATTRIBUTE_WITH_UNKNOWN_VALUE_TYPES_BY_ENTITY_VALUE_ID__COUNT_DESC
  COLLECTION_ITEMS_BY_ENTITY_ID__COUNT_ASC
  COLLECTION_ITEMS_BY_ENTITY_ID__COUNT_DESC
}

type GeoEntity implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String
  description: String
  createdById: String!
  createdAt: Int!
  createdAtBlock: Int!
  updatedAt: Int
  updatedAtBlock: Int

  """Reads a single `Account` that is related to this `GeoEntity`."""
  createdBy: Account

  """Reads and enables pagination through a set of `Space`."""
  spacesByConfigurationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceFilter
  ): SpacesConnection!

  """Reads and enables pagination through a set of `GeoEntityType`."""
  geoEntityTypesByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeoEntityType`."""
    orderBy: [GeoEntityTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeoEntityTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityTypeFilter
  ): GeoEntityTypesConnection!

  """Reads and enables pagination through a set of `GeoEntityType`."""
  geoEntityTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeoEntityType`."""
    orderBy: [GeoEntityTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeoEntityTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityTypeFilter
  ): GeoEntityTypesConnection!

  """Reads and enables pagination through a set of `Profile`."""
  profilesByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfileFilter
  ): ProfilesConnection!

  """Reads and enables pagination through a set of `ProposedVersion`."""
  proposedVersionsByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposedVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposedVersionFilter
  ): ProposedVersionsConnection!

  """Reads and enables pagination through a set of `Triple`."""
  triplesByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleFilter
  ): TriplesConnection!

  """Reads and enables pagination through a set of `Triple`."""
  triplesByAttributeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleFilter
  ): TriplesConnection!

  """Reads and enables pagination through a set of `Triple`."""
  triplesByEntityValueId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleFilter
  ): TriplesConnection!

  """Reads and enables pagination through a set of `Version`."""
  versionsByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VersionFilter
  ): VersionsConnection!

  """Reads and enables pagination through a set of `Action`."""
  actionsByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads and enables pagination through a set of `Action`."""
  actionsByAttributeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads and enables pagination through a set of `Action`."""
  actionsByEntityValueId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads and enables pagination through a set of `Collection`."""
  collectionsByEntityId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionFilter
  ): CollectionsConnection!

  """Reads and enables pagination through a set of `GeoEntity`."""
  schema(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection!
  schemaCount: Int

  """Reads and enables pagination through a set of `GeoEntity`."""
  typeSchema(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection!
  typeSchemaCount: Int

  """Reads and enables pagination through a set of `GeoEntity`."""
  types(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection!
  typesCount: Int
}

"""
A condition to be used against `GeoEntity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GeoEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdById` field."""
  createdById: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Int

  """Checks for equality with the object’s `updatedAtBlock` field."""
  updatedAtBlock: Int
}

"""
A filter to be used against `GeoEntity` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdById` field."""
  createdById: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: IntFilter

  """Filter by the object’s `updatedAtBlock` field."""
  updatedAtBlock: IntFilter

  """Filter by the object’s `schemaCount` field."""
  schemaCount: IntFilter

  """Filter by the object’s `typeSchemaCount` field."""
  typeSchemaCount: IntFilter

  """Filter by the object’s `typesCount` field."""
  typesCount: IntFilter

  """Filter by the object’s `spacesByConfigurationId` relation."""
  spacesByConfigurationId: GeoEntityToManySpaceFilter

  """Some related `spacesByConfigurationId` exist."""
  spacesByConfigurationIdExist: Boolean

  """Filter by the object’s `geoEntityTypesByEntityId` relation."""
  geoEntityTypesByEntityId: GeoEntityToManyGeoEntityTypeFilter

  """Some related `geoEntityTypesByEntityId` exist."""
  geoEntityTypesByEntityIdExist: Boolean

  """Filter by the object’s `geoEntityTypesByTypeId` relation."""
  geoEntityTypesByTypeId: GeoEntityToManyGeoEntityTypeFilter

  """Some related `geoEntityTypesByTypeId` exist."""
  geoEntityTypesByTypeIdExist: Boolean

  """Filter by the object’s `profilesByEntityId` relation."""
  profilesByEntityId: GeoEntityToManyProfileFilter

  """Some related `profilesByEntityId` exist."""
  profilesByEntityIdExist: Boolean

  """Filter by the object’s `proposedVersionsByEntityId` relation."""
  proposedVersionsByEntityId: GeoEntityToManyProposedVersionFilter

  """Some related `proposedVersionsByEntityId` exist."""
  proposedVersionsByEntityIdExist: Boolean

  """Filter by the object’s `triplesByEntityId` relation."""
  triplesByEntityId: GeoEntityToManyTripleFilter

  """Some related `triplesByEntityId` exist."""
  triplesByEntityIdExist: Boolean

  """Filter by the object’s `triplesByAttributeId` relation."""
  triplesByAttributeId: GeoEntityToManyTripleFilter

  """Some related `triplesByAttributeId` exist."""
  triplesByAttributeIdExist: Boolean

  """Filter by the object’s `triplesByEntityValueId` relation."""
  triplesByEntityValueId: GeoEntityToManyTripleFilter

  """Some related `triplesByEntityValueId` exist."""
  triplesByEntityValueIdExist: Boolean

  """Filter by the object’s `versionsByEntityId` relation."""
  versionsByEntityId: GeoEntityToManyVersionFilter

  """Some related `versionsByEntityId` exist."""
  versionsByEntityIdExist: Boolean

  """Filter by the object’s `actionsByEntityId` relation."""
  actionsByEntityId: GeoEntityToManyActionFilter

  """Some related `actionsByEntityId` exist."""
  actionsByEntityIdExist: Boolean

  """Filter by the object’s `actionsByAttributeId` relation."""
  actionsByAttributeId: GeoEntityToManyActionFilter

  """Some related `actionsByAttributeId` exist."""
  actionsByAttributeIdExist: Boolean

  """Filter by the object’s `actionsByEntityValueId` relation."""
  actionsByEntityValueId: GeoEntityToManyActionFilter

  """Some related `actionsByEntityValueId` exist."""
  actionsByEntityValueIdExist: Boolean

  """Filter by the object’s `collectionsByEntityId` relation."""
  collectionsByEntityId: GeoEntityToManyCollectionFilter

  """Some related `collectionsByEntityId` exist."""
  collectionsByEntityIdExist: Boolean

  """
  Filter by the object’s `attributeWithRelationValueTypesByEntityValueId` relation.
  """
  attributeWithRelationValueTypesByEntityValueId: GeoEntityToManyAttributeWithRelationValueTypeFilter

  """Some related `attributeWithRelationValueTypesByEntityValueId` exist."""
  attributeWithRelationValueTypesByEntityValueIdExist: Boolean

  """
  Filter by the object’s `attributeWithUnknownValueTypesByEntityValueId` relation.
  """
  attributeWithUnknownValueTypesByEntityValueId: GeoEntityToManyAttributeWithUnknownValueTypeFilter

  """Some related `attributeWithUnknownValueTypesByEntityValueId` exist."""
  attributeWithUnknownValueTypesByEntityValueIdExist: Boolean

  """Filter by the object’s `collectionItemsByEntityId` relation."""
  collectionItemsByEntityId: GeoEntityToManyCollectionItemFilter

  """Some related `collectionItemsByEntityId` exist."""
  collectionItemsByEntityIdExist: Boolean

  """Filter by the object’s `createdBy` relation."""
  createdBy: AccountFilter

  """Checks for all expressions in this list."""
  and: [GeoEntityFilter!]

  """Checks for any expressions in this list."""
  or: [GeoEntityFilter!]

  """Negates the expression."""
  not: GeoEntityFilter
}

"""An input for mutations affecting `GeoEntity`"""
input GeoEntityInput {
  id: String!
  name: String
  description: String
  createdById: String!
  createdAt: Int!
  createdAtBlock: Int!
  updatedAt: Int
  updatedAtBlock: Int
}

"""
Represents an update to a `GeoEntity`. Fields that are set will be updated.
"""
input GeoEntityPatch {
  id: String
  name: String
  description: String
  createdById: String
  createdAt: Int
  createdAtBlock: Int
  updatedAt: Int
  updatedAtBlock: Int
}

"""
A filter to be used against many `Action` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyActionFilter {
  """
  Every related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ActionFilter

  """
  Some related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ActionFilter

  """
  No related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ActionFilter
}

"""
A filter to be used against many `AttributeWithRelationValueType` object types.
All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyAttributeWithRelationValueTypeFilter {
  """
  Every related `AttributeWithRelationValueType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttributeWithRelationValueTypeFilter

  """
  Some related `AttributeWithRelationValueType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttributeWithRelationValueTypeFilter

  """
  No related `AttributeWithRelationValueType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttributeWithRelationValueTypeFilter
}

"""
A filter to be used against many `AttributeWithUnknownValueType` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyAttributeWithUnknownValueTypeFilter {
  """
  Every related `AttributeWithUnknownValueType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttributeWithUnknownValueTypeFilter

  """
  Some related `AttributeWithUnknownValueType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttributeWithUnknownValueTypeFilter

  """
  No related `AttributeWithUnknownValueType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttributeWithUnknownValueTypeFilter
}

"""
A filter to be used against many `Collection` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyCollectionFilter {
  """
  Every related `Collection` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionFilter

  """
  Some related `Collection` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionFilter

  """
  No related `Collection` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionFilter
}

"""
A filter to be used against many `CollectionItem` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyCollectionItemFilter {
  """
  Every related `CollectionItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionItemFilter

  """
  Some related `CollectionItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionItemFilter

  """
  No related `CollectionItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionItemFilter
}

"""
A filter to be used against many `GeoEntityType` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyGeoEntityTypeFilter {
  """
  Every related `GeoEntityType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GeoEntityTypeFilter

  """
  Some related `GeoEntityType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GeoEntityTypeFilter

  """
  No related `GeoEntityType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GeoEntityTypeFilter
}

"""
A filter to be used against many `Profile` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyProfileFilter {
  """
  Every related `Profile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProfileFilter

  """
  Some related `Profile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProfileFilter

  """
  No related `Profile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProfileFilter
}

"""
A filter to be used against many `ProposedVersion` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyProposedVersionFilter {
  """
  Every related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposedVersionFilter

  """
  Some related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposedVersionFilter

  """
  No related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposedVersionFilter
}

"""
A filter to be used against many `Space` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManySpaceFilter {
  """
  Every related `Space` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceFilter

  """
  Some related `Space` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceFilter

  """
  No related `Space` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceFilter
}

"""
A filter to be used against many `Triple` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyTripleFilter {
  """
  Every related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TripleFilter

  """
  Some related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TripleFilter

  """
  No related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TripleFilter
}

"""
A filter to be used against many `Version` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityToManyVersionFilter {
  """
  Every related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: VersionFilter

  """
  Some related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: VersionFilter

  """
  No related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: VersionFilter
}

type GeoEntityType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  entityId: String!
  typeId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  type: GeoEntity
}

"""
A condition to be used against `GeoEntityType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GeoEntityTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `entityId` field."""
  entityId: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `GeoEntityType` object types. All fields are combined with a logical ‘and.’
"""
input GeoEntityTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Filter by the object’s `type` relation."""
  type: GeoEntityFilter

  """Checks for all expressions in this list."""
  and: [GeoEntityTypeFilter!]

  """Checks for any expressions in this list."""
  or: [GeoEntityTypeFilter!]

  """Negates the expression."""
  not: GeoEntityTypeFilter
}

"""An input for mutations affecting `GeoEntityType`"""
input GeoEntityTypeInput {
  id: Int
  entityId: String!
  typeId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `GeoEntityType`. Fields that are set will be updated.
"""
input GeoEntityTypePatch {
  id: Int
  entityId: String
  typeId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `GeoEntityType` values."""
type GeoEntityTypesConnection {
  """A list of `GeoEntityType` objects."""
  nodes: [GeoEntityType]!

  """
  A list of edges which contains the `GeoEntityType` and cursor to aid in pagination.
  """
  edges: [GeoEntityTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GeoEntityType` you could get from the connection."""
  totalCount: Int!
}

"""A `GeoEntityType` edge in the connection."""
type GeoEntityTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GeoEntityType` at the end of the edge."""
  node: GeoEntityType
}

"""Methods to use when ordering `GeoEntityType`."""
enum GeoEntityTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_TYPE_ID__ID_ASC
  GEO_ENTITY_BY_TYPE_ID__ID_DESC
  GEO_ENTITY_BY_TYPE_ID__NAME_ASC
  GEO_ENTITY_BY_TYPE_ID__NAME_DESC
  GEO_ENTITY_BY_TYPE_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_TYPE_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_TYPE_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_TYPE_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_TYPE_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_TYPE_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_TYPE_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_TYPE_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_TYPE_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_TYPE_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_TYPE_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_TYPE_ID__UPDATED_AT_BLOCK_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A connection to a list of `LogEntry` values."""
type LogEntriesConnection {
  """A list of `LogEntry` objects."""
  nodes: [LogEntry]!

  """
  A list of edges which contains the `LogEntry` and cursor to aid in pagination.
  """
  edges: [LogEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LogEntry` you could get from the connection."""
  totalCount: Int!
}

"""A `LogEntry` edge in the connection."""
type LogEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LogEntry` at the end of the edge."""
  node: LogEntry
}

"""Methods to use when ordering `LogEntry`."""
enum LogEntriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  URI_ASC
  URI_DESC
  CREATED_BY_ID_ASC
  CREATED_BY_ID_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  MIME_TYPE_ASC
  MIME_TYPE_DESC
  DECODED_ASC
  DECODED_DESC
  JSON_ASC
  JSON_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ACCOUNT_BY_CREATED_BY_ID__ID_ASC
  ACCOUNT_BY_CREATED_BY_ID__ID_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
}

type LogEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  createdAtBlock: String!
  uri: String!
  createdById: String!
  spaceId: String!
  mimeType: String
  decoded: String
  json: String

  """Reads a single `Account` that is related to this `LogEntry`."""
  createdBy: Account

  """Reads a single `Space` that is related to this `LogEntry`."""
  space: Space
}

"""
A condition to be used against `LogEntry` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LogEntryCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: String

  """Checks for equality with the object’s `uri` field."""
  uri: String

  """Checks for equality with the object’s `createdById` field."""
  createdById: String

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `mimeType` field."""
  mimeType: String

  """Checks for equality with the object’s `decoded` field."""
  decoded: String

  """Checks for equality with the object’s `json` field."""
  json: String
}

"""
A filter to be used against `LogEntry` object types. All fields are combined with a logical ‘and.’
"""
input LogEntryFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: StringFilter

  """Filter by the object’s `uri` field."""
  uri: StringFilter

  """Filter by the object’s `createdById` field."""
  createdById: StringFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `mimeType` field."""
  mimeType: StringFilter

  """Filter by the object’s `decoded` field."""
  decoded: StringFilter

  """Filter by the object’s `json` field."""
  json: StringFilter

  """Filter by the object’s `createdBy` relation."""
  createdBy: AccountFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Checks for all expressions in this list."""
  and: [LogEntryFilter!]

  """Checks for any expressions in this list."""
  or: [LogEntryFilter!]

  """Negates the expression."""
  not: LogEntryFilter
}

"""An input for mutations affecting `LogEntry`"""
input LogEntryInput {
  id: String!
  createdAtBlock: String!
  uri: String!
  createdById: String!
  spaceId: String!
  mimeType: String
  decoded: String
  json: String
}

"""
Represents an update to a `LogEntry`. Fields that are set will be updated.
"""
input LogEntryPatch {
  id: String
  createdAtBlock: String
  uri: String
  createdById: String
  spaceId: String
  mimeType: String
  decoded: String
  json: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `Action`."""
  createAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionInput!
  ): CreateActionPayload

  """Creates a single `Collection`."""
  createCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionInput!
  ): CreateCollectionPayload

  """Creates a single `SubstreamCursor`."""
  createSubstreamCursor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubstreamCursorInput!
  ): CreateSubstreamCursorPayload

  """Creates a single `GeoEntity`."""
  createGeoEntity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeoEntityInput!
  ): CreateGeoEntityPayload

  """Creates a single `GeoEntityType`."""
  createGeoEntityType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeoEntityTypeInput!
  ): CreateGeoEntityTypePayload

  """Creates a single `LogEntry`."""
  createLogEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLogEntryInput!
  ): CreateLogEntryPayload

  """Creates a single `OnchainProfile`."""
  createOnchainProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOnchainProfileInput!
  ): CreateOnchainProfilePayload

  """Creates a single `Profile`."""
  createProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfileInput!
  ): CreateProfilePayload

  """Creates a single `ProposalVote`."""
  createProposalVote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProposalVoteInput!
  ): CreateProposalVotePayload

  """Creates a single `Proposal`."""
  createProposal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProposalInput!
  ): CreateProposalPayload

  """Creates a single `ProposedVersion`."""
  createProposedVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProposedVersionInput!
  ): CreateProposedVersionPayload

  """Creates a single `SpaceAdmin`."""
  createSpaceAdmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceAdminInput!
  ): CreateSpaceAdminPayload

  """Creates a single `SpaceEditorController`."""
  createSpaceEditorController(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceEditorControllerInput!
  ): CreateSpaceEditorControllerPayload

  """Creates a single `SpaceEditor`."""
  createSpaceEditor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceEditorInput!
  ): CreateSpaceEditorPayload

  """Creates a single `SpaceEditorsV2`."""
  createSpaceEditorsV2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceEditorsV2Input!
  ): CreateSpaceEditorsV2Payload

  """Creates a single `Space`."""
  createSpace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpaceInput!
  ): CreateSpacePayload

  """Creates a single `Subspace`."""
  createSubspace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubspaceInput!
  ): CreateSubspacePayload

  """Creates a single `TripleVersion`."""
  createTripleVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTripleVersionInput!
  ): CreateTripleVersionPayload

  """Creates a single `Triple`."""
  createTriple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTripleInput!
  ): CreateTriplePayload

  """Creates a single `Version`."""
  createVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVersionInput!
  ): CreateVersionPayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByNodeIdInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Action` using its globally unique id and a patch."""
  updateActionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionByNodeIdInput!
  ): UpdateActionPayload

  """Updates a single `Action` using a unique key and a patch."""
  updateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionInput!
  ): UpdateActionPayload

  """
  Updates a single `Collection` using its globally unique id and a patch.
  """
  updateCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByNodeIdInput!
  ): UpdateCollectionPayload

  """Updates a single `Collection` using a unique key and a patch."""
  updateCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload

  """
  Updates a single `SubstreamCursor` using its globally unique id and a patch.
  """
  updateSubstreamCursorByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubstreamCursorByNodeIdInput!
  ): UpdateSubstreamCursorPayload

  """Updates a single `SubstreamCursor` using a unique key and a patch."""
  updateSubstreamCursor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubstreamCursorInput!
  ): UpdateSubstreamCursorPayload

  """Updates a single `GeoEntity` using its globally unique id and a patch."""
  updateGeoEntityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeoEntityByNodeIdInput!
  ): UpdateGeoEntityPayload

  """Updates a single `GeoEntity` using a unique key and a patch."""
  updateGeoEntity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeoEntityInput!
  ): UpdateGeoEntityPayload

  """
  Updates a single `GeoEntityType` using its globally unique id and a patch.
  """
  updateGeoEntityTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeoEntityTypeByNodeIdInput!
  ): UpdateGeoEntityTypePayload

  """Updates a single `GeoEntityType` using a unique key and a patch."""
  updateGeoEntityType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeoEntityTypeInput!
  ): UpdateGeoEntityTypePayload

  """Updates a single `GeoEntityType` using a unique key and a patch."""
  updateGeoEntityTypeByEntityIdAndTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeoEntityTypeByEntityIdAndTypeIdInput!
  ): UpdateGeoEntityTypePayload

  """Updates a single `LogEntry` using its globally unique id and a patch."""
  updateLogEntryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogEntryByNodeIdInput!
  ): UpdateLogEntryPayload

  """Updates a single `LogEntry` using a unique key and a patch."""
  updateLogEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogEntryInput!
  ): UpdateLogEntryPayload

  """
  Updates a single `OnchainProfile` using its globally unique id and a patch.
  """
  updateOnchainProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOnchainProfileByNodeIdInput!
  ): UpdateOnchainProfilePayload

  """Updates a single `OnchainProfile` using a unique key and a patch."""
  updateOnchainProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOnchainProfileInput!
  ): UpdateOnchainProfilePayload

  """Updates a single `Profile` using its globally unique id and a patch."""
  updateProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByNodeIdInput!
  ): UpdateProfilePayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileInput!
  ): UpdateProfilePayload

  """
  Updates a single `ProposalVote` using its globally unique id and a patch.
  """
  updateProposalVoteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProposalVoteByNodeIdInput!
  ): UpdateProposalVotePayload

  """Updates a single `ProposalVote` using a unique key and a patch."""
  updateProposalVote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProposalVoteInput!
  ): UpdateProposalVotePayload

  """Updates a single `Proposal` using its globally unique id and a patch."""
  updateProposalByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProposalByNodeIdInput!
  ): UpdateProposalPayload

  """Updates a single `Proposal` using a unique key and a patch."""
  updateProposal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProposalInput!
  ): UpdateProposalPayload

  """
  Updates a single `ProposedVersion` using its globally unique id and a patch.
  """
  updateProposedVersionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProposedVersionByNodeIdInput!
  ): UpdateProposedVersionPayload

  """Updates a single `ProposedVersion` using a unique key and a patch."""
  updateProposedVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProposedVersionInput!
  ): UpdateProposedVersionPayload

  """Updates a single `SpaceAdmin` using a unique key and a patch."""
  updateSpaceAdminByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceAdminByAccountIdAndSpaceIdInput!
  ): UpdateSpaceAdminPayload

  """
  Updates a single `SpaceEditorController` using a unique key and a patch.
  """
  updateSpaceEditorControllerByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceEditorControllerByAccountIdAndSpaceIdInput!
  ): UpdateSpaceEditorControllerPayload

  """Updates a single `SpaceEditor` using a unique key and a patch."""
  updateSpaceEditorByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceEditorByAccountIdAndSpaceIdInput!
  ): UpdateSpaceEditorPayload

  """Updates a single `SpaceEditorsV2` using a unique key and a patch."""
  updateSpaceEditorsV2ByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceEditorsV2ByAccountIdAndSpaceIdInput!
  ): UpdateSpaceEditorsV2Payload

  """Updates a single `Space` using its globally unique id and a patch."""
  updateSpaceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceByNodeIdInput!
  ): UpdateSpacePayload

  """Updates a single `Space` using a unique key and a patch."""
  updateSpace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpaceInput!
  ): UpdateSpacePayload

  """Updates a single `Subspace` using its globally unique id and a patch."""
  updateSubspaceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubspaceByNodeIdInput!
  ): UpdateSubspacePayload

  """Updates a single `Subspace` using a unique key and a patch."""
  updateSubspace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubspaceInput!
  ): UpdateSubspacePayload

  """
  Updates a single `TripleVersion` using its globally unique id and a patch.
  """
  updateTripleVersionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTripleVersionByNodeIdInput!
  ): UpdateTripleVersionPayload

  """Updates a single `TripleVersion` using a unique key and a patch."""
  updateTripleVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTripleVersionInput!
  ): UpdateTripleVersionPayload

  """Updates a single `Triple` using its globally unique id and a patch."""
  updateTripleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTripleByNodeIdInput!
  ): UpdateTriplePayload

  """Updates a single `Triple` using a unique key and a patch."""
  updateTriple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTripleInput!
  ): UpdateTriplePayload

  """Updates a single `Version` using its globally unique id and a patch."""
  updateVersionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVersionByNodeIdInput!
  ): UpdateVersionPayload

  """Updates a single `Version` using a unique key and a patch."""
  updateVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVersionInput!
  ): UpdateVersionPayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByNodeIdInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `Action` using its globally unique id."""
  deleteActionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionByNodeIdInput!
  ): DeleteActionPayload

  """Deletes a single `Action` using a unique key."""
  deleteAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionInput!
  ): DeleteActionPayload

  """Deletes a single `Collection` using its globally unique id."""
  deleteCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByNodeIdInput!
  ): DeleteCollectionPayload

  """Deletes a single `Collection` using a unique key."""
  deleteCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionInput!
  ): DeleteCollectionPayload

  """Deletes a single `SubstreamCursor` using its globally unique id."""
  deleteSubstreamCursorByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubstreamCursorByNodeIdInput!
  ): DeleteSubstreamCursorPayload

  """Deletes a single `SubstreamCursor` using a unique key."""
  deleteSubstreamCursor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubstreamCursorInput!
  ): DeleteSubstreamCursorPayload

  """Deletes a single `GeoEntity` using its globally unique id."""
  deleteGeoEntityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeoEntityByNodeIdInput!
  ): DeleteGeoEntityPayload

  """Deletes a single `GeoEntity` using a unique key."""
  deleteGeoEntity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeoEntityInput!
  ): DeleteGeoEntityPayload

  """Deletes a single `GeoEntityType` using its globally unique id."""
  deleteGeoEntityTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeoEntityTypeByNodeIdInput!
  ): DeleteGeoEntityTypePayload

  """Deletes a single `GeoEntityType` using a unique key."""
  deleteGeoEntityType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeoEntityTypeInput!
  ): DeleteGeoEntityTypePayload

  """Deletes a single `GeoEntityType` using a unique key."""
  deleteGeoEntityTypeByEntityIdAndTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeoEntityTypeByEntityIdAndTypeIdInput!
  ): DeleteGeoEntityTypePayload

  """Deletes a single `LogEntry` using its globally unique id."""
  deleteLogEntryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogEntryByNodeIdInput!
  ): DeleteLogEntryPayload

  """Deletes a single `LogEntry` using a unique key."""
  deleteLogEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogEntryInput!
  ): DeleteLogEntryPayload

  """Deletes a single `OnchainProfile` using its globally unique id."""
  deleteOnchainProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOnchainProfileByNodeIdInput!
  ): DeleteOnchainProfilePayload

  """Deletes a single `OnchainProfile` using a unique key."""
  deleteOnchainProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOnchainProfileInput!
  ): DeleteOnchainProfilePayload

  """Deletes a single `Profile` using its globally unique id."""
  deleteProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileByNodeIdInput!
  ): DeleteProfilePayload

  """Deletes a single `Profile` using a unique key."""
  deleteProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileInput!
  ): DeleteProfilePayload

  """Deletes a single `ProposalVote` using its globally unique id."""
  deleteProposalVoteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProposalVoteByNodeIdInput!
  ): DeleteProposalVotePayload

  """Deletes a single `ProposalVote` using a unique key."""
  deleteProposalVote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProposalVoteInput!
  ): DeleteProposalVotePayload

  """Deletes a single `Proposal` using its globally unique id."""
  deleteProposalByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProposalByNodeIdInput!
  ): DeleteProposalPayload

  """Deletes a single `Proposal` using a unique key."""
  deleteProposal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProposalInput!
  ): DeleteProposalPayload

  """Deletes a single `ProposedVersion` using its globally unique id."""
  deleteProposedVersionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProposedVersionByNodeIdInput!
  ): DeleteProposedVersionPayload

  """Deletes a single `ProposedVersion` using a unique key."""
  deleteProposedVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProposedVersionInput!
  ): DeleteProposedVersionPayload

  """Deletes a single `SpaceAdmin` using a unique key."""
  deleteSpaceAdminByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceAdminByAccountIdAndSpaceIdInput!
  ): DeleteSpaceAdminPayload

  """Deletes a single `SpaceEditorController` using a unique key."""
  deleteSpaceEditorControllerByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceEditorControllerByAccountIdAndSpaceIdInput!
  ): DeleteSpaceEditorControllerPayload

  """Deletes a single `SpaceEditor` using a unique key."""
  deleteSpaceEditorByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceEditorByAccountIdAndSpaceIdInput!
  ): DeleteSpaceEditorPayload

  """Deletes a single `SpaceEditorsV2` using a unique key."""
  deleteSpaceEditorsV2ByAccountIdAndSpaceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceEditorsV2ByAccountIdAndSpaceIdInput!
  ): DeleteSpaceEditorsV2Payload

  """Deletes a single `Space` using its globally unique id."""
  deleteSpaceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceByNodeIdInput!
  ): DeleteSpacePayload

  """Deletes a single `Space` using a unique key."""
  deleteSpace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpaceInput!
  ): DeleteSpacePayload

  """Deletes a single `Subspace` using its globally unique id."""
  deleteSubspaceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubspaceByNodeIdInput!
  ): DeleteSubspacePayload

  """Deletes a single `Subspace` using a unique key."""
  deleteSubspace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubspaceInput!
  ): DeleteSubspacePayload

  """Deletes a single `TripleVersion` using its globally unique id."""
  deleteTripleVersionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTripleVersionByNodeIdInput!
  ): DeleteTripleVersionPayload

  """Deletes a single `TripleVersion` using a unique key."""
  deleteTripleVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTripleVersionInput!
  ): DeleteTripleVersionPayload

  """Deletes a single `Triple` using its globally unique id."""
  deleteTripleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTripleByNodeIdInput!
  ): DeleteTriplePayload

  """Deletes a single `Triple` using a unique key."""
  deleteTriple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTripleInput!
  ): DeleteTriplePayload

  """Deletes a single `Version` using its globally unique id."""
  deleteVersionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVersionByNodeIdInput!
  ): DeleteVersionPayload

  """Deletes a single `Version` using a unique key."""
  deleteVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVersionInput!
  ): DeleteVersionPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type OnchainProfile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  accountId: String!
  homeSpaceId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `Account` that is related to this `OnchainProfile`."""
  account: Account

  """Reads a single `Space` that is related to this `OnchainProfile`."""
  homeSpace: Space

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfileFilter
  ): ProfilesConnection!
}

"""
A condition to be used against `OnchainProfile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OnchainProfileCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `homeSpaceId` field."""
  homeSpaceId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `OnchainProfile` object types. All fields are combined with a logical ‘and.’
"""
input OnchainProfileFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: StringFilter

  """Filter by the object’s `homeSpaceId` field."""
  homeSpaceId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `profiles` relation."""
  profiles: OnchainProfileToManyProfileFilter

  """Some related `profiles` exist."""
  profilesExist: Boolean

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Filter by the object’s `homeSpace` relation."""
  homeSpace: SpaceFilter

  """Checks for all expressions in this list."""
  and: [OnchainProfileFilter!]

  """Checks for any expressions in this list."""
  or: [OnchainProfileFilter!]

  """Negates the expression."""
  not: OnchainProfileFilter
}

"""An input for mutations affecting `OnchainProfile`"""
input OnchainProfileInput {
  id: String!
  accountId: String!
  homeSpaceId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `OnchainProfile`. Fields that are set will be updated.
"""
input OnchainProfilePatch {
  id: String
  accountId: String
  homeSpaceId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `OnchainProfile` values."""
type OnchainProfilesConnection {
  """A list of `OnchainProfile` objects."""
  nodes: [OnchainProfile]!

  """
  A list of edges which contains the `OnchainProfile` and cursor to aid in pagination.
  """
  edges: [OnchainProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OnchainProfile` you could get from the connection."""
  totalCount: Int!
}

"""A `OnchainProfile` edge in the connection."""
type OnchainProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OnchainProfile` at the end of the edge."""
  node: OnchainProfile
}

"""Methods to use when ordering `OnchainProfile`."""
enum OnchainProfilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  HOME_SPACE_ID_ASC
  HOME_SPACE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ACCOUNT_BY_ACCOUNT_ID__ID_ASC
  ACCOUNT_BY_ACCOUNT_ID__ID_DESC
  SPACE_BY_HOME_SPACE_ID__ID_ASC
  SPACE_BY_HOME_SPACE_ID__ID_DESC
  SPACE_BY_HOME_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_HOME_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_HOME_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_HOME_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_HOME_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_HOME_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_HOME_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_HOME_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_HOME_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_HOME_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_HOME_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_HOME_SPACE_ID__CONFIGURATION_ID_DESC
  PROFILES_BY_ONCHAIN_PROFILE_ID__COUNT_ASC
  PROFILES_BY_ONCHAIN_PROFILE_ID__COUNT_DESC
}

"""
A filter to be used against many `Profile` object types. All fields are combined with a logical ‘and.’
"""
input OnchainProfileToManyProfileFilter {
  """
  Every related `Profile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProfileFilter

  """
  Some related `Profile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProfileFilter

  """
  No related `Profile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProfileFilter
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Profile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  entityId: String!
  onchainProfileId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `GeoEntity` that is related to this `Profile`."""
  entity: GeoEntity

  """Reads a single `OnchainProfile` that is related to this `Profile`."""
  onchainProfile: OnchainProfile
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String

  """Checks for equality with the object’s `onchainProfileId` field."""
  onchainProfileId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `Profile` object types. All fields are combined with a logical ‘and.’
"""
input ProfileFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `onchainProfileId` field."""
  onchainProfileId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Filter by the object’s `onchainProfile` relation."""
  onchainProfile: OnchainProfileFilter

  """Checks for all expressions in this list."""
  and: [ProfileFilter!]

  """Checks for any expressions in this list."""
  or: [ProfileFilter!]

  """Negates the expression."""
  not: ProfileFilter
}

"""An input for mutations affecting `Profile`"""
input ProfileInput {
  id: String!
  entityId: String!
  onchainProfileId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  id: String
  entityId: String
  onchainProfileId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
  """A list of `Profile` objects."""
  nodes: [Profile]!

  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profile` you could get from the connection."""
  totalCount: Int!
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  ONCHAIN_PROFILE_ID_ASC
  ONCHAIN_PROFILE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__ID_ASC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__ID_DESC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__ACCOUNT_ID_ASC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__ACCOUNT_ID_DESC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__HOME_SPACE_ID_ASC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__HOME_SPACE_ID_DESC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__CREATED_AT_ASC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__CREATED_AT_DESC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__CREATED_AT_BLOCK_ASC
  ONCHAIN_PROFILE_BY_ONCHAIN_PROFILE_ID__CREATED_AT_BLOCK_DESC
}

type Proposal implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  onchainProposalId: String!
  spaceId: String!
  name: String
  description: String
  uri: String
  type: ProposalType!
  status: ProposalStatus!
  createdAt: Int!
  createdAtBlock: Int!
  createdById: String!
  startTime: Int!
  endTime: Int!

  """Reads a single `Space` that is related to this `Proposal`."""
  space: Space

  """Reads a single `Account` that is related to this `Proposal`."""
  createdBy: Account

  """Reads and enables pagination through a set of `ProposedVersion`."""
  proposedVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposedVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposedVersionFilter
  ): ProposedVersionsConnection!

  """Reads and enables pagination through a set of `ProposalVote`."""
  proposalVotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalVoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalVoteFilter
  ): ProposalVotesConnection!
}

"""
A condition to be used against `Proposal` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProposalCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `onchainProposalId` field."""
  onchainProposalId: String

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `uri` field."""
  uri: String

  """Checks for equality with the object’s `type` field."""
  type: ProposalType

  """Checks for equality with the object’s `status` field."""
  status: ProposalStatus

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int

  """Checks for equality with the object’s `createdById` field."""
  createdById: String

  """Checks for equality with the object’s `startTime` field."""
  startTime: Int

  """Checks for equality with the object’s `endTime` field."""
  endTime: Int
}

"""
A filter to be used against `Proposal` object types. All fields are combined with a logical ‘and.’
"""
input ProposalFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `onchainProposalId` field."""
  onchainProposalId: StringFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `uri` field."""
  uri: StringFilter

  """Filter by the object’s `type` field."""
  type: ProposalTypeFilter

  """Filter by the object’s `status` field."""
  status: ProposalStatusFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `createdById` field."""
  createdById: StringFilter

  """Filter by the object’s `startTime` field."""
  startTime: IntFilter

  """Filter by the object’s `endTime` field."""
  endTime: IntFilter

  """Filter by the object’s `proposedVersions` relation."""
  proposedVersions: ProposalToManyProposedVersionFilter

  """Some related `proposedVersions` exist."""
  proposedVersionsExist: Boolean

  """Filter by the object’s `proposalVotes` relation."""
  proposalVotes: ProposalToManyProposalVoteFilter

  """Some related `proposalVotes` exist."""
  proposalVotesExist: Boolean

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `createdBy` relation."""
  createdBy: AccountFilter

  """Checks for all expressions in this list."""
  and: [ProposalFilter!]

  """Checks for any expressions in this list."""
  or: [ProposalFilter!]

  """Negates the expression."""
  not: ProposalFilter
}

"""An input for mutations affecting `Proposal`"""
input ProposalInput {
  id: String!
  onchainProposalId: String!
  spaceId: String!
  name: String
  description: String
  uri: String
  type: ProposalType!
  status: ProposalStatus!
  createdAt: Int!
  createdAtBlock: Int!
  createdById: String!
  startTime: Int!
  endTime: Int!
}

"""
Represents an update to a `Proposal`. Fields that are set will be updated.
"""
input ProposalPatch {
  id: String
  onchainProposalId: String
  spaceId: String
  name: String
  description: String
  uri: String
  type: ProposalType
  status: ProposalStatus
  createdAt: Int
  createdAtBlock: Int
  createdById: String
  startTime: Int
  endTime: Int
}

"""A connection to a list of `Proposal` values."""
type ProposalsConnection {
  """A list of `Proposal` objects."""
  nodes: [Proposal]!

  """
  A list of edges which contains the `Proposal` and cursor to aid in pagination.
  """
  edges: [ProposalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Proposal` you could get from the connection."""
  totalCount: Int!
}

"""A `Proposal` edge in the connection."""
type ProposalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Proposal` at the end of the edge."""
  node: Proposal
}

"""Methods to use when ordering `Proposal`."""
enum ProposalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ONCHAIN_PROPOSAL_ID_ASC
  ONCHAIN_PROPOSAL_ID_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  URI_ASC
  URI_DESC
  TYPE_ASC
  TYPE_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  CREATED_BY_ID_ASC
  CREATED_BY_ID_DESC
  START_TIME_ASC
  START_TIME_DESC
  END_TIME_ASC
  END_TIME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  ACCOUNT_BY_CREATED_BY_ID__ID_ASC
  ACCOUNT_BY_CREATED_BY_ID__ID_DESC
  PROPOSED_VERSIONS_BY_PROPOSAL_ID__COUNT_ASC
  PROPOSED_VERSIONS_BY_PROPOSAL_ID__COUNT_DESC
  PROPOSAL_VOTES_BY_PROPOSAL_ID__COUNT_ASC
  PROPOSAL_VOTES_BY_PROPOSAL_ID__COUNT_DESC
}

enum ProposalStatus {
  PROPOSED
  APPROVED
  REJECTED
  CANCELED
  EXECUTED
}

"""
A filter to be used against ProposalStatus fields. All fields are combined with a logical ‘and.’
"""
input ProposalStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ProposalStatus

  """Not equal to the specified value."""
  notEqualTo: ProposalStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ProposalStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ProposalStatus

  """Included in the specified list."""
  in: [ProposalStatus!]

  """Not included in the specified list."""
  notIn: [ProposalStatus!]

  """Less than the specified value."""
  lessThan: ProposalStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ProposalStatus

  """Greater than the specified value."""
  greaterThan: ProposalStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ProposalStatus
}

"""
A filter to be used against many `ProposalVote` object types. All fields are combined with a logical ‘and.’
"""
input ProposalToManyProposalVoteFilter {
  """
  Every related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposalVoteFilter

  """
  Some related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposalVoteFilter

  """
  No related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposalVoteFilter
}

"""
A filter to be used against many `ProposedVersion` object types. All fields are combined with a logical ‘and.’
"""
input ProposalToManyProposedVersionFilter {
  """
  Every related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposedVersionFilter

  """
  Some related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposedVersionFilter

  """
  No related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposedVersionFilter
}

enum ProposalType {
  CONTENT
  ADD_SUBSPACE
  REMOVE_SUBSPACE
  ADD_EDITOR
  REMOVE_EDITOR
  ADD_MEMBER
  REMOVE_MEMBER
}

"""
A filter to be used against ProposalType fields. All fields are combined with a logical ‘and.’
"""
input ProposalTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ProposalType

  """Not equal to the specified value."""
  notEqualTo: ProposalType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ProposalType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ProposalType

  """Included in the specified list."""
  in: [ProposalType!]

  """Not included in the specified list."""
  notIn: [ProposalType!]

  """Less than the specified value."""
  lessThan: ProposalType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ProposalType

  """Greater than the specified value."""
  greaterThan: ProposalType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ProposalType
}

type ProposalVote implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  proposalId: String!
  onchainProposalId: String!
  spaceId: String!
  accountId: String!
  vote: VoteType!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `Proposal` that is related to this `ProposalVote`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposalVote`."""
  space: Space

  """Reads a single `Account` that is related to this `ProposalVote`."""
  account: Account
}

"""
A condition to be used against `ProposalVote` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProposalVoteCondition {
  """Checks for equality with the object’s `proposalId` field."""
  proposalId: String

  """Checks for equality with the object’s `onchainProposalId` field."""
  onchainProposalId: String

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `vote` field."""
  vote: VoteType

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `ProposalVote` object types. All fields are combined with a logical ‘and.’
"""
input ProposalVoteFilter {
  """Filter by the object’s `proposalId` field."""
  proposalId: StringFilter

  """Filter by the object’s `onchainProposalId` field."""
  onchainProposalId: StringFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: StringFilter

  """Filter by the object’s `vote` field."""
  vote: VoteTypeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `proposal` relation."""
  proposal: ProposalFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [ProposalVoteFilter!]

  """Checks for any expressions in this list."""
  or: [ProposalVoteFilter!]

  """Negates the expression."""
  not: ProposalVoteFilter
}

"""An input for mutations affecting `ProposalVote`"""
input ProposalVoteInput {
  proposalId: String!
  onchainProposalId: String!
  spaceId: String!
  accountId: String!
  vote: VoteType!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `ProposalVote`. Fields that are set will be updated.
"""
input ProposalVotePatch {
  proposalId: String
  onchainProposalId: String
  spaceId: String
  accountId: String
  vote: VoteType
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `ProposalVote` values."""
type ProposalVotesConnection {
  """A list of `ProposalVote` objects."""
  nodes: [ProposalVote]!

  """
  A list of edges which contains the `ProposalVote` and cursor to aid in pagination.
  """
  edges: [ProposalVotesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProposalVote` you could get from the connection."""
  totalCount: Int!
}

"""A `ProposalVote` edge in the connection."""
type ProposalVotesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProposalVote` at the end of the edge."""
  node: ProposalVote
}

"""Methods to use when ordering `ProposalVote`."""
enum ProposalVotesOrderBy {
  NATURAL
  PROPOSAL_ID_ASC
  PROPOSAL_ID_DESC
  ONCHAIN_PROPOSAL_ID_ASC
  ONCHAIN_PROPOSAL_ID_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  VOTE_ASC
  VOTE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROPOSAL_BY_PROPOSAL_ID__ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__ONCHAIN_PROPOSAL_ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__ONCHAIN_PROPOSAL_ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__SPACE_ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__SPACE_ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__NAME_ASC
  PROPOSAL_BY_PROPOSAL_ID__NAME_DESC
  PROPOSAL_BY_PROPOSAL_ID__DESCRIPTION_ASC
  PROPOSAL_BY_PROPOSAL_ID__DESCRIPTION_DESC
  PROPOSAL_BY_PROPOSAL_ID__URI_ASC
  PROPOSAL_BY_PROPOSAL_ID__URI_DESC
  PROPOSAL_BY_PROPOSAL_ID__TYPE_ASC
  PROPOSAL_BY_PROPOSAL_ID__TYPE_DESC
  PROPOSAL_BY_PROPOSAL_ID__STATUS_ASC
  PROPOSAL_BY_PROPOSAL_ID__STATUS_DESC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_ASC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_DESC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_BLOCK_ASC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_BLOCK_DESC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_BY_ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_BY_ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__START_TIME_ASC
  PROPOSAL_BY_PROPOSAL_ID__START_TIME_DESC
  PROPOSAL_BY_PROPOSAL_ID__END_TIME_ASC
  PROPOSAL_BY_PROPOSAL_ID__END_TIME_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  ACCOUNT_BY_ACCOUNT_ID__ID_ASC
  ACCOUNT_BY_ACCOUNT_ID__ID_DESC
}

type ProposedVersion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String
  description: String
  createdAt: Int!
  createdAtBlock: Int!
  createdById: String!
  entityId: String!
  proposalId: String!
  spaceId: String!

  """Reads a single `Account` that is related to this `ProposedVersion`."""
  createdBy: Account

  """Reads a single `GeoEntity` that is related to this `ProposedVersion`."""
  entity: GeoEntity

  """Reads a single `Proposal` that is related to this `ProposedVersion`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposedVersion`."""
  space: Space

  """Reads and enables pagination through a set of `Version`."""
  versions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VersionFilter
  ): VersionsConnection!

  """Reads and enables pagination through a set of `Action`."""
  actions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!
}

"""
A condition to be used against `ProposedVersion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProposedVersionCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int

  """Checks for equality with the object’s `createdById` field."""
  createdById: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String

  """Checks for equality with the object’s `proposalId` field."""
  proposalId: String

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String
}

"""
A filter to be used against `ProposedVersion` object types. All fields are combined with a logical ‘and.’
"""
input ProposedVersionFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `createdById` field."""
  createdById: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `proposalId` field."""
  proposalId: StringFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `versions` relation."""
  versions: ProposedVersionToManyVersionFilter

  """Some related `versions` exist."""
  versionsExist: Boolean

  """Filter by the object’s `actions` relation."""
  actions: ProposedVersionToManyActionFilter

  """Some related `actions` exist."""
  actionsExist: Boolean

  """Filter by the object’s `createdBy` relation."""
  createdBy: AccountFilter

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Filter by the object’s `proposal` relation."""
  proposal: ProposalFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Checks for all expressions in this list."""
  and: [ProposedVersionFilter!]

  """Checks for any expressions in this list."""
  or: [ProposedVersionFilter!]

  """Negates the expression."""
  not: ProposedVersionFilter
}

"""An input for mutations affecting `ProposedVersion`"""
input ProposedVersionInput {
  id: String!
  name: String
  description: String
  createdAt: Int!
  createdAtBlock: Int!
  createdById: String!
  entityId: String!
  proposalId: String!
  spaceId: String!
}

"""
Represents an update to a `ProposedVersion`. Fields that are set will be updated.
"""
input ProposedVersionPatch {
  id: String
  name: String
  description: String
  createdAt: Int
  createdAtBlock: Int
  createdById: String
  entityId: String
  proposalId: String
  spaceId: String
}

"""A connection to a list of `ProposedVersion` values."""
type ProposedVersionsConnection {
  """A list of `ProposedVersion` objects."""
  nodes: [ProposedVersion]!

  """
  A list of edges which contains the `ProposedVersion` and cursor to aid in pagination.
  """
  edges: [ProposedVersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProposedVersion` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProposedVersion` edge in the connection."""
type ProposedVersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProposedVersion` at the end of the edge."""
  node: ProposedVersion
}

"""Methods to use when ordering `ProposedVersion`."""
enum ProposedVersionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  CREATED_BY_ID_ASC
  CREATED_BY_ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  PROPOSAL_ID_ASC
  PROPOSAL_ID_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ACCOUNT_BY_CREATED_BY_ID__ID_ASC
  ACCOUNT_BY_CREATED_BY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  PROPOSAL_BY_PROPOSAL_ID__ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__ONCHAIN_PROPOSAL_ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__ONCHAIN_PROPOSAL_ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__SPACE_ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__SPACE_ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__NAME_ASC
  PROPOSAL_BY_PROPOSAL_ID__NAME_DESC
  PROPOSAL_BY_PROPOSAL_ID__DESCRIPTION_ASC
  PROPOSAL_BY_PROPOSAL_ID__DESCRIPTION_DESC
  PROPOSAL_BY_PROPOSAL_ID__URI_ASC
  PROPOSAL_BY_PROPOSAL_ID__URI_DESC
  PROPOSAL_BY_PROPOSAL_ID__TYPE_ASC
  PROPOSAL_BY_PROPOSAL_ID__TYPE_DESC
  PROPOSAL_BY_PROPOSAL_ID__STATUS_ASC
  PROPOSAL_BY_PROPOSAL_ID__STATUS_DESC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_ASC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_DESC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_BLOCK_ASC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_AT_BLOCK_DESC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_BY_ID_ASC
  PROPOSAL_BY_PROPOSAL_ID__CREATED_BY_ID_DESC
  PROPOSAL_BY_PROPOSAL_ID__START_TIME_ASC
  PROPOSAL_BY_PROPOSAL_ID__START_TIME_DESC
  PROPOSAL_BY_PROPOSAL_ID__END_TIME_ASC
  PROPOSAL_BY_PROPOSAL_ID__END_TIME_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  VERSIONS_BY_PROPOSED_VERSION_ID__COUNT_ASC
  VERSIONS_BY_PROPOSED_VERSION_ID__COUNT_DESC
  ACTIONS_BY_PROPOSED_VERSION_ID__COUNT_ASC
  ACTIONS_BY_PROPOSED_VERSION_ID__COUNT_DESC
}

"""
A filter to be used against many `Action` object types. All fields are combined with a logical ‘and.’
"""
input ProposedVersionToManyActionFilter {
  """
  Every related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ActionFilter

  """
  Some related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ActionFilter

  """
  No related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ActionFilter
}

"""
A filter to be used against many `Version` object types. All fields are combined with a logical ‘and.’
"""
input ProposedVersionToManyVersionFilter {
  """
  Every related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: VersionFilter

  """
  Some related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: VersionFilter

  """
  No related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: VersionFilter
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): AccountsConnection

  """Reads and enables pagination through a set of `Action`."""
  actions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection

  """Reads and enables pagination through a set of `Collection`."""
  collections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionFilter
  ): CollectionsConnection

  """Reads and enables pagination through a set of `SubstreamCursor`."""
  substreamCursors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubstreamCursor`."""
    orderBy: [SubstreamCursorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubstreamCursorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubstreamCursorFilter
  ): SubstreamCursorsConnection

  """Reads and enables pagination through a set of `GeoEntity`."""
  geoEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeoEntity`."""
    orderBy: [GeoEntitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeoEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection

  """Reads and enables pagination through a set of `GeoEntityType`."""
  geoEntityTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeoEntityType`."""
    orderBy: [GeoEntityTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeoEntityTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityTypeFilter
  ): GeoEntityTypesConnection

  """Reads and enables pagination through a set of `LogEntry`."""
  logEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogEntryFilter
  ): LogEntriesConnection

  """Reads and enables pagination through a set of `OnchainProfile`."""
  onchainProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OnchainProfile`."""
    orderBy: [OnchainProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OnchainProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OnchainProfileFilter
  ): OnchainProfilesConnection

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfileFilter
  ): ProfilesConnection

  """Reads and enables pagination through a set of `ProposalVote`."""
  proposalVotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalVoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalVoteFilter
  ): ProposalVotesConnection

  """Reads and enables pagination through a set of `Proposal`."""
  proposals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Proposal`."""
    orderBy: [ProposalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalFilter
  ): ProposalsConnection

  """Reads and enables pagination through a set of `ProposedVersion`."""
  proposedVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposedVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposedVersionFilter
  ): ProposedVersionsConnection

  """Reads and enables pagination through a set of `SpaceAdmin`."""
  spaceAdmins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceAdmin`."""
    orderBy: [SpaceAdminsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceAdminCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceAdminFilter
  ): SpaceAdminsConnection

  """Reads and enables pagination through a set of `SpaceEditorController`."""
  spaceEditorControllers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditorController`."""
    orderBy: [SpaceEditorControllersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorControllerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorControllerFilter
  ): SpaceEditorControllersConnection

  """Reads and enables pagination through a set of `SpaceEditor`."""
  spaceEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditor`."""
    orderBy: [SpaceEditorsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorFilter
  ): SpaceEditorsConnection

  """Reads and enables pagination through a set of `SpaceEditorsV2`."""
  spaceEditorsV2s(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditorsV2`."""
    orderBy: [SpaceEditorsV2sOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorsV2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorsV2Filter
  ): SpaceEditorsV2sConnection

  """Reads and enables pagination through a set of `Space`."""
  spaces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceFilter
  ): SpacesConnection

  """Reads and enables pagination through a set of `Subspace`."""
  subspaces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Subspace`."""
    orderBy: [SubspacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubspaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubspaceFilter
  ): SubspacesConnection

  """Reads and enables pagination through a set of `TripleVersion`."""
  tripleVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TripleVersion`."""
    orderBy: [TripleVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleVersionFilter
  ): TripleVersionsConnection

  """Reads and enables pagination through a set of `Triple`."""
  triples(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleFilter
  ): TriplesConnection

  """Reads and enables pagination through a set of `Version`."""
  versions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VersionFilter
  ): VersionsConnection
  account(id: String!): Account
  action(id: String!): Action
  collection(id: String!): Collection
  substreamCursor(id: Int!): SubstreamCursor
  geoEntity(id: String!): GeoEntity
  geoEntityType(id: Int!): GeoEntityType
  geoEntityTypeByEntityIdAndTypeId(entityId: String!, typeId: String!): GeoEntityType
  logEntry(id: String!): LogEntry
  onchainProfile(id: String!): OnchainProfile
  profile(id: String!): Profile
  proposalVote(onchainProposalId: String!, spaceId: String!, accountId: String!): ProposalVote
  proposal(id: String!): Proposal
  proposedVersion(id: String!): ProposedVersion
  spaceAdminByAccountIdAndSpaceId(accountId: String!, spaceId: String!): SpaceAdmin
  spaceEditorControllerByAccountIdAndSpaceId(accountId: String!, spaceId: String!): SpaceEditorController
  spaceEditorByAccountIdAndSpaceId(accountId: String!, spaceId: String!): SpaceEditor
  spaceEditorsV2ByAccountIdAndSpaceId(accountId: String!, spaceId: String!): SpaceEditorsV2
  space(id: String!): Space
  subspace(id: String!): Subspace
  tripleVersion(tripleId: String!, versionId: String!): TripleVersion
  triple(id: String!): Triple
  version(id: String!): Version

  """Reads a single `Account` using its globally unique `ID`."""
  accountByNodeId(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account

  """Reads a single `Action` using its globally unique `ID`."""
  actionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Action`."""
    nodeId: ID!
  ): Action

  """Reads a single `Collection` using its globally unique `ID`."""
  collectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Collection`.
    """
    nodeId: ID!
  ): Collection

  """Reads a single `SubstreamCursor` using its globally unique `ID`."""
  substreamCursorByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SubstreamCursor`.
    """
    nodeId: ID!
  ): SubstreamCursor

  """Reads a single `GeoEntity` using its globally unique `ID`."""
  geoEntityByNodeId(
    """The globally unique `ID` to be used in selecting a single `GeoEntity`."""
    nodeId: ID!
  ): GeoEntity

  """Reads a single `GeoEntityType` using its globally unique `ID`."""
  geoEntityTypeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GeoEntityType`.
    """
    nodeId: ID!
  ): GeoEntityType

  """Reads a single `LogEntry` using its globally unique `ID`."""
  logEntryByNodeId(
    """The globally unique `ID` to be used in selecting a single `LogEntry`."""
    nodeId: ID!
  ): LogEntry

  """Reads a single `OnchainProfile` using its globally unique `ID`."""
  onchainProfileByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OnchainProfile`.
    """
    nodeId: ID!
  ): OnchainProfile

  """Reads a single `Profile` using its globally unique `ID`."""
  profileByNodeId(
    """The globally unique `ID` to be used in selecting a single `Profile`."""
    nodeId: ID!
  ): Profile

  """Reads a single `ProposalVote` using its globally unique `ID`."""
  proposalVoteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProposalVote`.
    """
    nodeId: ID!
  ): ProposalVote

  """Reads a single `Proposal` using its globally unique `ID`."""
  proposalByNodeId(
    """The globally unique `ID` to be used in selecting a single `Proposal`."""
    nodeId: ID!
  ): Proposal

  """Reads a single `ProposedVersion` using its globally unique `ID`."""
  proposedVersionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProposedVersion`.
    """
    nodeId: ID!
  ): ProposedVersion

  """Reads a single `Space` using its globally unique `ID`."""
  spaceByNodeId(
    """The globally unique `ID` to be used in selecting a single `Space`."""
    nodeId: ID!
  ): Space

  """Reads a single `Subspace` using its globally unique `ID`."""
  subspaceByNodeId(
    """The globally unique `ID` to be used in selecting a single `Subspace`."""
    nodeId: ID!
  ): Subspace

  """Reads a single `TripleVersion` using its globally unique `ID`."""
  tripleVersionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TripleVersion`.
    """
    nodeId: ID!
  ): TripleVersion

  """Reads a single `Triple` using its globally unique `ID`."""
  tripleByNodeId(
    """The globally unique `ID` to be used in selecting a single `Triple`."""
    nodeId: ID!
  ): Triple

  """Reads a single `Version` using its globally unique `ID`."""
  versionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Version`."""
    nodeId: ID!
  ): Version
}

type Space implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  createdAtBlock: Int!
  isRootSpace: Boolean!
  spacePluginAddress: String
  mainVotingPluginAddress: String
  memberAccessPluginAddress: String
  configurationId: String

  """Reads a single `GeoEntity` that is related to this `Space`."""
  configuration: GeoEntity

  """Reads and enables pagination through a set of `OnchainProfile`."""
  onchainProfilesByHomeSpaceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OnchainProfile`."""
    orderBy: [OnchainProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OnchainProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OnchainProfileFilter
  ): OnchainProfilesConnection!

  """Reads and enables pagination through a set of `LogEntry`."""
  logEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogEntryFilter
  ): LogEntriesConnection!

  """Reads and enables pagination through a set of `Proposal`."""
  proposals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Proposal`."""
    orderBy: [ProposalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalFilter
  ): ProposalsConnection!

  """Reads and enables pagination through a set of `ProposedVersion`."""
  proposedVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposedVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposedVersionFilter
  ): ProposedVersionsConnection!

  """Reads and enables pagination through a set of `SpaceAdmin`."""
  spaceAdmins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceAdmin`."""
    orderBy: [SpaceAdminsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceAdminCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceAdminFilter
  ): SpaceAdminsConnection!

  """Reads and enables pagination through a set of `SpaceEditor`."""
  spaceEditors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditor`."""
    orderBy: [SpaceEditorsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorFilter
  ): SpaceEditorsConnection!

  """Reads and enables pagination through a set of `SpaceEditorsV2`."""
  spaceEditorsV2s(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditorsV2`."""
    orderBy: [SpaceEditorsV2sOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorsV2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorsV2Filter
  ): SpaceEditorsV2sConnection!

  """Reads and enables pagination through a set of `SpaceEditorController`."""
  spaceEditorControllers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpaceEditorController`."""
    orderBy: [SpaceEditorControllersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpaceEditorControllerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpaceEditorControllerFilter
  ): SpaceEditorControllersConnection!

  """Reads and enables pagination through a set of `Subspace`."""
  subspacesByParentSpaceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Subspace`."""
    orderBy: [SubspacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubspaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubspaceFilter
  ): SubspacesConnection!

  """Reads and enables pagination through a set of `Subspace`."""
  subspacesByChildSpaceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Subspace`."""
    orderBy: [SubspacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubspaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubspaceFilter
  ): SubspacesConnection!

  """Reads and enables pagination through a set of `Triple`."""
  triples(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleFilter
  ): TriplesConnection!

  """Reads and enables pagination through a set of `Version`."""
  versions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VersionFilter
  ): VersionsConnection!

  """Reads and enables pagination through a set of `ProposalVote`."""
  proposalVotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalVoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProposalVoteFilter
  ): ProposalVotesConnection!

  """Reads and enables pagination through a set of `GeoEntity`."""
  metadata(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeoEntityFilter
  ): GeoEntitiesConnection!
}

type SpaceAdmin {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `Space` that is related to this `SpaceAdmin`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceAdmin`."""
  account: Account
}

"""
A condition to be used against `SpaceAdmin` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SpaceAdminCondition {
  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `SpaceAdmin` object types. All fields are combined with a logical ‘and.’
"""
input SpaceAdminFilter {
  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [SpaceAdminFilter!]

  """Checks for any expressions in this list."""
  or: [SpaceAdminFilter!]

  """Negates the expression."""
  not: SpaceAdminFilter
}

"""An input for mutations affecting `SpaceAdmin`"""
input SpaceAdminInput {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `SpaceAdmin`. Fields that are set will be updated.
"""
input SpaceAdminPatch {
  spaceId: String
  accountId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `SpaceAdmin` values."""
type SpaceAdminsConnection {
  """A list of `SpaceAdmin` objects."""
  nodes: [SpaceAdmin]!

  """
  A list of edges which contains the `SpaceAdmin` and cursor to aid in pagination.
  """
  edges: [SpaceAdminsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SpaceAdmin` you could get from the connection."""
  totalCount: Int!
}

"""A `SpaceAdmin` edge in the connection."""
type SpaceAdminsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpaceAdmin` at the end of the edge."""
  node: SpaceAdmin
}

"""Methods to use when ordering `SpaceAdmin`."""
enum SpaceAdminsOrderBy {
  NATURAL
  SPACE_ID_ASC
  SPACE_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  ACCOUNT_BY_ACCOUNT_ID__ID_ASC
  ACCOUNT_BY_ACCOUNT_ID__ID_DESC
}

"""
A condition to be used against `Space` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SpaceCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int

  """Checks for equality with the object’s `isRootSpace` field."""
  isRootSpace: Boolean

  """Checks for equality with the object’s `spacePluginAddress` field."""
  spacePluginAddress: String

  """Checks for equality with the object’s `mainVotingPluginAddress` field."""
  mainVotingPluginAddress: String

  """
  Checks for equality with the object’s `memberAccessPluginAddress` field.
  """
  memberAccessPluginAddress: String

  """Checks for equality with the object’s `configurationId` field."""
  configurationId: String
}

type SpaceEditor {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `Space` that is related to this `SpaceEditor`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditor`."""
  account: Account
}

"""
A condition to be used against `SpaceEditor` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SpaceEditorCondition {
  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

type SpaceEditorController {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """
  Reads a single `Space` that is related to this `SpaceEditorController`.
  """
  space: Space

  """
  Reads a single `Account` that is related to this `SpaceEditorController`.
  """
  account: Account
}

"""
A condition to be used against `SpaceEditorController` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SpaceEditorControllerCondition {
  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `SpaceEditorController` object types. All fields are combined with a logical ‘and.’
"""
input SpaceEditorControllerFilter {
  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [SpaceEditorControllerFilter!]

  """Checks for any expressions in this list."""
  or: [SpaceEditorControllerFilter!]

  """Negates the expression."""
  not: SpaceEditorControllerFilter
}

"""An input for mutations affecting `SpaceEditorController`"""
input SpaceEditorControllerInput {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `SpaceEditorController`. Fields that are set will be updated.
"""
input SpaceEditorControllerPatch {
  spaceId: String
  accountId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `SpaceEditorController` values."""
type SpaceEditorControllersConnection {
  """A list of `SpaceEditorController` objects."""
  nodes: [SpaceEditorController]!

  """
  A list of edges which contains the `SpaceEditorController` and cursor to aid in pagination.
  """
  edges: [SpaceEditorControllersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SpaceEditorController` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SpaceEditorController` edge in the connection."""
type SpaceEditorControllersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpaceEditorController` at the end of the edge."""
  node: SpaceEditorController
}

"""Methods to use when ordering `SpaceEditorController`."""
enum SpaceEditorControllersOrderBy {
  NATURAL
  SPACE_ID_ASC
  SPACE_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  ACCOUNT_BY_ACCOUNT_ID__ID_ASC
  ACCOUNT_BY_ACCOUNT_ID__ID_DESC
}

"""
A filter to be used against `SpaceEditor` object types. All fields are combined with a logical ‘and.’
"""
input SpaceEditorFilter {
  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [SpaceEditorFilter!]

  """Checks for any expressions in this list."""
  or: [SpaceEditorFilter!]

  """Negates the expression."""
  not: SpaceEditorFilter
}

"""An input for mutations affecting `SpaceEditor`"""
input SpaceEditorInput {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `SpaceEditor`. Fields that are set will be updated.
"""
input SpaceEditorPatch {
  spaceId: String
  accountId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `SpaceEditor` values."""
type SpaceEditorsConnection {
  """A list of `SpaceEditor` objects."""
  nodes: [SpaceEditor]!

  """
  A list of edges which contains the `SpaceEditor` and cursor to aid in pagination.
  """
  edges: [SpaceEditorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SpaceEditor` you could get from the connection."""
  totalCount: Int!
}

"""A `SpaceEditor` edge in the connection."""
type SpaceEditorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpaceEditor` at the end of the edge."""
  node: SpaceEditor
}

"""Methods to use when ordering `SpaceEditor`."""
enum SpaceEditorsOrderBy {
  NATURAL
  SPACE_ID_ASC
  SPACE_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  ACCOUNT_BY_ACCOUNT_ID__ID_ASC
  ACCOUNT_BY_ACCOUNT_ID__ID_DESC
}

type SpaceEditorsV2 {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!

  """Reads a single `Space` that is related to this `SpaceEditorsV2`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditorsV2`."""
  account: Account
}

"""
A condition to be used against `SpaceEditorsV2` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SpaceEditorsV2Condition {
  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `accountId` field."""
  accountId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int
}

"""
A filter to be used against `SpaceEditorsV2` object types. All fields are combined with a logical ‘and.’
"""
input SpaceEditorsV2Filter {
  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `accountId` field."""
  accountId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [SpaceEditorsV2Filter!]

  """Checks for any expressions in this list."""
  or: [SpaceEditorsV2Filter!]

  """Negates the expression."""
  not: SpaceEditorsV2Filter
}

"""An input for mutations affecting `SpaceEditorsV2`"""
input SpaceEditorsV2Input {
  spaceId: String!
  accountId: String!
  createdAt: Int!
  createdAtBlock: Int!
}

"""
Represents an update to a `SpaceEditorsV2`. Fields that are set will be updated.
"""
input SpaceEditorsV2Patch {
  spaceId: String
  accountId: String
  createdAt: Int
  createdAtBlock: Int
}

"""A connection to a list of `SpaceEditorsV2` values."""
type SpaceEditorsV2sConnection {
  """A list of `SpaceEditorsV2` objects."""
  nodes: [SpaceEditorsV2]!

  """
  A list of edges which contains the `SpaceEditorsV2` and cursor to aid in pagination.
  """
  edges: [SpaceEditorsV2sEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SpaceEditorsV2` you could get from the connection."""
  totalCount: Int!
}

"""A `SpaceEditorsV2` edge in the connection."""
type SpaceEditorsV2sEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpaceEditorsV2` at the end of the edge."""
  node: SpaceEditorsV2
}

"""Methods to use when ordering `SpaceEditorsV2`."""
enum SpaceEditorsV2sOrderBy {
  NATURAL
  SPACE_ID_ASC
  SPACE_ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  ACCOUNT_BY_ACCOUNT_ID__ID_ASC
  ACCOUNT_BY_ACCOUNT_ID__ID_DESC
}

"""
A filter to be used against `Space` object types. All fields are combined with a logical ‘and.’
"""
input SpaceFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `isRootSpace` field."""
  isRootSpace: BooleanFilter

  """Filter by the object’s `spacePluginAddress` field."""
  spacePluginAddress: StringFilter

  """Filter by the object’s `mainVotingPluginAddress` field."""
  mainVotingPluginAddress: StringFilter

  """Filter by the object’s `memberAccessPluginAddress` field."""
  memberAccessPluginAddress: StringFilter

  """Filter by the object’s `configurationId` field."""
  configurationId: StringFilter

  """Filter by the object’s `onchainProfilesByHomeSpaceId` relation."""
  onchainProfilesByHomeSpaceId: SpaceToManyOnchainProfileFilter

  """Some related `onchainProfilesByHomeSpaceId` exist."""
  onchainProfilesByHomeSpaceIdExist: Boolean

  """Filter by the object’s `logEntries` relation."""
  logEntries: SpaceToManyLogEntryFilter

  """Some related `logEntries` exist."""
  logEntriesExist: Boolean

  """Filter by the object’s `proposals` relation."""
  proposals: SpaceToManyProposalFilter

  """Some related `proposals` exist."""
  proposalsExist: Boolean

  """Filter by the object’s `proposedVersions` relation."""
  proposedVersions: SpaceToManyProposedVersionFilter

  """Some related `proposedVersions` exist."""
  proposedVersionsExist: Boolean

  """Filter by the object’s `spaceAdmins` relation."""
  spaceAdmins: SpaceToManySpaceAdminFilter

  """Some related `spaceAdmins` exist."""
  spaceAdminsExist: Boolean

  """Filter by the object’s `spaceEditors` relation."""
  spaceEditors: SpaceToManySpaceEditorFilter

  """Some related `spaceEditors` exist."""
  spaceEditorsExist: Boolean

  """Filter by the object’s `spaceEditorsV2s` relation."""
  spaceEditorsV2s: SpaceToManySpaceEditorsV2Filter

  """Some related `spaceEditorsV2s` exist."""
  spaceEditorsV2sExist: Boolean

  """Filter by the object’s `spaceEditorControllers` relation."""
  spaceEditorControllers: SpaceToManySpaceEditorControllerFilter

  """Some related `spaceEditorControllers` exist."""
  spaceEditorControllersExist: Boolean

  """Filter by the object’s `subspacesByParentSpaceId` relation."""
  subspacesByParentSpaceId: SpaceToManySubspaceFilter

  """Some related `subspacesByParentSpaceId` exist."""
  subspacesByParentSpaceIdExist: Boolean

  """Filter by the object’s `subspacesByChildSpaceId` relation."""
  subspacesByChildSpaceId: SpaceToManySubspaceFilter

  """Some related `subspacesByChildSpaceId` exist."""
  subspacesByChildSpaceIdExist: Boolean

  """Filter by the object’s `triples` relation."""
  triples: SpaceToManyTripleFilter

  """Some related `triples` exist."""
  triplesExist: Boolean

  """Filter by the object’s `versions` relation."""
  versions: SpaceToManyVersionFilter

  """Some related `versions` exist."""
  versionsExist: Boolean

  """Filter by the object’s `proposalVotes` relation."""
  proposalVotes: SpaceToManyProposalVoteFilter

  """Some related `proposalVotes` exist."""
  proposalVotesExist: Boolean

  """Filter by the object’s `configuration` relation."""
  configuration: GeoEntityFilter

  """A related `configuration` exists."""
  configurationExists: Boolean

  """Checks for all expressions in this list."""
  and: [SpaceFilter!]

  """Checks for any expressions in this list."""
  or: [SpaceFilter!]

  """Negates the expression."""
  not: SpaceFilter
}

"""An input for mutations affecting `Space`"""
input SpaceInput {
  id: String!
  createdAtBlock: Int!
  isRootSpace: Boolean!
  spacePluginAddress: String
  mainVotingPluginAddress: String
  memberAccessPluginAddress: String
  configurationId: String
}

"""
Represents an update to a `Space`. Fields that are set will be updated.
"""
input SpacePatch {
  id: String
  createdAtBlock: Int
  isRootSpace: Boolean
  spacePluginAddress: String
  mainVotingPluginAddress: String
  memberAccessPluginAddress: String
  configurationId: String
}

"""A connection to a list of `Space` values."""
type SpacesConnection {
  """A list of `Space` objects."""
  nodes: [Space]!

  """
  A list of edges which contains the `Space` and cursor to aid in pagination.
  """
  edges: [SpacesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Space` you could get from the connection."""
  totalCount: Int!
}

"""A `Space` edge in the connection."""
type SpacesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Space` at the end of the edge."""
  node: Space
}

"""Methods to use when ordering `Space`."""
enum SpacesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  IS_ROOT_SPACE_ASC
  IS_ROOT_SPACE_DESC
  SPACE_PLUGIN_ADDRESS_ASC
  SPACE_PLUGIN_ADDRESS_DESC
  MAIN_VOTING_PLUGIN_ADDRESS_ASC
  MAIN_VOTING_PLUGIN_ADDRESS_DESC
  MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  CONFIGURATION_ID_ASC
  CONFIGURATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__ID_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__ID_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__NAME_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__NAME_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_CONFIGURATION_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_CONFIGURATION_ID__UPDATED_AT_BLOCK_DESC
  ONCHAIN_PROFILES_BY_HOME_SPACE_ID__COUNT_ASC
  ONCHAIN_PROFILES_BY_HOME_SPACE_ID__COUNT_DESC
  LOG_ENTRIES_BY_SPACE_ID__COUNT_ASC
  LOG_ENTRIES_BY_SPACE_ID__COUNT_DESC
  PROPOSALS_BY_SPACE_ID__COUNT_ASC
  PROPOSALS_BY_SPACE_ID__COUNT_DESC
  PROPOSED_VERSIONS_BY_SPACE_ID__COUNT_ASC
  PROPOSED_VERSIONS_BY_SPACE_ID__COUNT_DESC
  SPACE_ADMINS_BY_SPACE_ID__COUNT_ASC
  SPACE_ADMINS_BY_SPACE_ID__COUNT_DESC
  SPACE_EDITORS_BY_SPACE_ID__COUNT_ASC
  SPACE_EDITORS_BY_SPACE_ID__COUNT_DESC
  SPACE_EDITORS_V2_S_BY_SPACE_ID__COUNT_ASC
  SPACE_EDITORS_V2_S_BY_SPACE_ID__COUNT_DESC
  SPACE_EDITOR_CONTROLLERS_BY_SPACE_ID__COUNT_ASC
  SPACE_EDITOR_CONTROLLERS_BY_SPACE_ID__COUNT_DESC
  SUBSPACES_BY_PARENT_SPACE_ID__COUNT_ASC
  SUBSPACES_BY_PARENT_SPACE_ID__COUNT_DESC
  SUBSPACES_BY_CHILD_SPACE_ID__COUNT_ASC
  SUBSPACES_BY_CHILD_SPACE_ID__COUNT_DESC
  TRIPLES_BY_SPACE_ID__COUNT_ASC
  TRIPLES_BY_SPACE_ID__COUNT_DESC
  VERSIONS_BY_SPACE_ID__COUNT_ASC
  VERSIONS_BY_SPACE_ID__COUNT_DESC
  PROPOSAL_VOTES_BY_SPACE_ID__COUNT_ASC
  PROPOSAL_VOTES_BY_SPACE_ID__COUNT_DESC
}

"""
A filter to be used against many `LogEntry` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyLogEntryFilter {
  """
  Every related `LogEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LogEntryFilter

  """
  Some related `LogEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LogEntryFilter

  """
  No related `LogEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LogEntryFilter
}

"""
A filter to be used against many `OnchainProfile` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyOnchainProfileFilter {
  """
  Every related `OnchainProfile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OnchainProfileFilter

  """
  Some related `OnchainProfile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OnchainProfileFilter

  """
  No related `OnchainProfile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OnchainProfileFilter
}

"""
A filter to be used against many `Proposal` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyProposalFilter {
  """
  Every related `Proposal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposalFilter

  """
  Some related `Proposal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposalFilter

  """
  No related `Proposal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposalFilter
}

"""
A filter to be used against many `ProposalVote` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyProposalVoteFilter {
  """
  Every related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposalVoteFilter

  """
  Some related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposalVoteFilter

  """
  No related `ProposalVote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposalVoteFilter
}

"""
A filter to be used against many `ProposedVersion` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyProposedVersionFilter {
  """
  Every related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProposedVersionFilter

  """
  Some related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProposedVersionFilter

  """
  No related `ProposedVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProposedVersionFilter
}

"""
A filter to be used against many `SpaceAdmin` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManySpaceAdminFilter {
  """
  Every related `SpaceAdmin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceAdminFilter

  """
  Some related `SpaceAdmin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceAdminFilter

  """
  No related `SpaceAdmin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceAdminFilter
}

"""
A filter to be used against many `SpaceEditorController` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManySpaceEditorControllerFilter {
  """
  Every related `SpaceEditorController` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceEditorControllerFilter

  """
  Some related `SpaceEditorController` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceEditorControllerFilter

  """
  No related `SpaceEditorController` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceEditorControllerFilter
}

"""
A filter to be used against many `SpaceEditor` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManySpaceEditorFilter {
  """
  Every related `SpaceEditor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceEditorFilter

  """
  Some related `SpaceEditor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceEditorFilter

  """
  No related `SpaceEditor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceEditorFilter
}

"""
A filter to be used against many `SpaceEditorsV2` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManySpaceEditorsV2Filter {
  """
  Every related `SpaceEditorsV2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SpaceEditorsV2Filter

  """
  Some related `SpaceEditorsV2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SpaceEditorsV2Filter

  """
  No related `SpaceEditorsV2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SpaceEditorsV2Filter
}

"""
A filter to be used against many `Subspace` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManySubspaceFilter {
  """
  Every related `Subspace` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SubspaceFilter

  """
  Some related `Subspace` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SubspaceFilter

  """
  No related `Subspace` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SubspaceFilter
}

"""
A filter to be used against many `Triple` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyTripleFilter {
  """
  Every related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TripleFilter

  """
  Some related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TripleFilter

  """
  No related `Triple` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TripleFilter
}

"""
A filter to be used against many `Version` object types. All fields are combined with a logical ‘and.’
"""
input SpaceToManyVersionFilter {
  """
  Every related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: VersionFilter

  """
  Some related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: VersionFilter

  """
  No related `Version` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: VersionFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

type Subspace implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  parentSpaceId: String!
  childSpaceId: String!

  """Reads a single `Space` that is related to this `Subspace`."""
  parentSpace: Space

  """Reads a single `Space` that is related to this `Subspace`."""
  childSpace: Space
}

"""
A condition to be used against `Subspace` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SubspaceCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `parentSpaceId` field."""
  parentSpaceId: String

  """Checks for equality with the object’s `childSpaceId` field."""
  childSpaceId: String
}

"""
A filter to be used against `Subspace` object types. All fields are combined with a logical ‘and.’
"""
input SubspaceFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `parentSpaceId` field."""
  parentSpaceId: StringFilter

  """Filter by the object’s `childSpaceId` field."""
  childSpaceId: StringFilter

  """Filter by the object’s `parentSpace` relation."""
  parentSpace: SpaceFilter

  """Filter by the object’s `childSpace` relation."""
  childSpace: SpaceFilter

  """Checks for all expressions in this list."""
  and: [SubspaceFilter!]

  """Checks for any expressions in this list."""
  or: [SubspaceFilter!]

  """Negates the expression."""
  not: SubspaceFilter
}

"""An input for mutations affecting `Subspace`"""
input SubspaceInput {
  id: String!
  parentSpaceId: String!
  childSpaceId: String!
}

"""
Represents an update to a `Subspace`. Fields that are set will be updated.
"""
input SubspacePatch {
  id: String
  parentSpaceId: String
  childSpaceId: String
}

"""A connection to a list of `Subspace` values."""
type SubspacesConnection {
  """A list of `Subspace` objects."""
  nodes: [Subspace]!

  """
  A list of edges which contains the `Subspace` and cursor to aid in pagination.
  """
  edges: [SubspacesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Subspace` you could get from the connection."""
  totalCount: Int!
}

"""A `Subspace` edge in the connection."""
type SubspacesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Subspace` at the end of the edge."""
  node: Subspace
}

"""Methods to use when ordering `Subspace`."""
enum SubspacesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PARENT_SPACE_ID_ASC
  PARENT_SPACE_ID_DESC
  CHILD_SPACE_ID_ASC
  CHILD_SPACE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPACE_BY_PARENT_SPACE_ID__ID_ASC
  SPACE_BY_PARENT_SPACE_ID__ID_DESC
  SPACE_BY_PARENT_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_PARENT_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_PARENT_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_PARENT_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_PARENT_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_PARENT_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_PARENT_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_PARENT_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_PARENT_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_PARENT_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_PARENT_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_PARENT_SPACE_ID__CONFIGURATION_ID_DESC
  SPACE_BY_CHILD_SPACE_ID__ID_ASC
  SPACE_BY_CHILD_SPACE_ID__ID_DESC
  SPACE_BY_CHILD_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_CHILD_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_CHILD_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_CHILD_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_CHILD_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_CHILD_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_CHILD_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_CHILD_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_CHILD_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_CHILD_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_CHILD_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_CHILD_SPACE_ID__CONFIGURATION_ID_DESC
}

type SubstreamCursor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  cursor: String!
  blockNumber: Int!
}

"""
A condition to be used against `SubstreamCursor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SubstreamCursorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `cursor` field."""
  cursor: String

  """Checks for equality with the object’s `blockNumber` field."""
  blockNumber: Int
}

"""
A filter to be used against `SubstreamCursor` object types. All fields are combined with a logical ‘and.’
"""
input SubstreamCursorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `cursor` field."""
  cursor: StringFilter

  """Filter by the object’s `blockNumber` field."""
  blockNumber: IntFilter

  """Checks for all expressions in this list."""
  and: [SubstreamCursorFilter!]

  """Checks for any expressions in this list."""
  or: [SubstreamCursorFilter!]

  """Negates the expression."""
  not: SubstreamCursorFilter
}

"""An input for mutations affecting `SubstreamCursor`"""
input SubstreamCursorInput {
  id: Int!
  cursor: String!
  blockNumber: Int!
}

"""
Represents an update to a `SubstreamCursor`. Fields that are set will be updated.
"""
input SubstreamCursorPatch {
  id: Int
  cursor: String
  blockNumber: Int
}

"""A connection to a list of `SubstreamCursor` values."""
type SubstreamCursorsConnection {
  """A list of `SubstreamCursor` objects."""
  nodes: [SubstreamCursor]!

  """
  A list of edges which contains the `SubstreamCursor` and cursor to aid in pagination.
  """
  edges: [SubstreamCursorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SubstreamCursor` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SubstreamCursor` edge in the connection."""
type SubstreamCursorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SubstreamCursor` at the end of the edge."""
  node: SubstreamCursor
}

"""Methods to use when ordering `SubstreamCursor`."""
enum SubstreamCursorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CURSOR_ASC
  CURSOR_DESC
  BLOCK_NUMBER_ASC
  BLOCK_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Triple implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  entityId: String!
  attributeId: String!
  valueType: String!
  valueId: String!
  numberValue: String
  stringValue: String
  arrayValue: String
  entityValueId: String
  isProtected: Boolean!
  spaceId: String!
  createdAt: Int!
  createdAtBlock: Int!
  isStale: Boolean!
  collectionValueId: String

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entityValue: GeoEntity

  """Reads a single `Space` that is related to this `Triple`."""
  space: Space

  """Reads a single `Collection` that is related to this `Triple`."""
  collectionValue: Collection

  """Reads and enables pagination through a set of `TripleVersion`."""
  tripleVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TripleVersion`."""
    orderBy: [TripleVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleVersionFilter
  ): TripleVersionsConnection!
}

"""
A condition to be used against `Triple` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TripleCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String

  """Checks for equality with the object’s `attributeId` field."""
  attributeId: String

  """Checks for equality with the object’s `valueType` field."""
  valueType: String

  """Checks for equality with the object’s `valueId` field."""
  valueId: String

  """Checks for equality with the object’s `numberValue` field."""
  numberValue: String

  """Checks for equality with the object’s `stringValue` field."""
  stringValue: String

  """Checks for equality with the object’s `arrayValue` field."""
  arrayValue: String

  """Checks for equality with the object’s `entityValueId` field."""
  entityValueId: String

  """Checks for equality with the object’s `isProtected` field."""
  isProtected: Boolean

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int

  """Checks for equality with the object’s `isStale` field."""
  isStale: Boolean

  """Checks for equality with the object’s `collectionValueId` field."""
  collectionValueId: String
}

"""
A filter to be used against `Triple` object types. All fields are combined with a logical ‘and.’
"""
input TripleFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `attributeId` field."""
  attributeId: StringFilter

  """Filter by the object’s `valueType` field."""
  valueType: StringFilter

  """Filter by the object’s `valueId` field."""
  valueId: StringFilter

  """Filter by the object’s `numberValue` field."""
  numberValue: StringFilter

  """Filter by the object’s `stringValue` field."""
  stringValue: StringFilter

  """Filter by the object’s `arrayValue` field."""
  arrayValue: StringFilter

  """Filter by the object’s `entityValueId` field."""
  entityValueId: StringFilter

  """Filter by the object’s `isProtected` field."""
  isProtected: BooleanFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `isStale` field."""
  isStale: BooleanFilter

  """Filter by the object’s `collectionValueId` field."""
  collectionValueId: StringFilter

  """Filter by the object’s `tripleVersions` relation."""
  tripleVersions: TripleToManyTripleVersionFilter

  """Some related `tripleVersions` exist."""
  tripleVersionsExist: Boolean

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Filter by the object’s `attribute` relation."""
  attribute: GeoEntityFilter

  """Filter by the object’s `entityValue` relation."""
  entityValue: GeoEntityFilter

  """A related `entityValue` exists."""
  entityValueExists: Boolean

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Filter by the object’s `collectionValue` relation."""
  collectionValue: CollectionFilter

  """A related `collectionValue` exists."""
  collectionValueExists: Boolean

  """Checks for all expressions in this list."""
  and: [TripleFilter!]

  """Checks for any expressions in this list."""
  or: [TripleFilter!]

  """Negates the expression."""
  not: TripleFilter
}

"""An input for mutations affecting `Triple`"""
input TripleInput {
  id: String!
  entityId: String!
  attributeId: String!
  valueType: String!
  valueId: String!
  numberValue: String
  stringValue: String
  arrayValue: String
  entityValueId: String
  isProtected: Boolean!
  spaceId: String!
  createdAt: Int!
  createdAtBlock: Int!
  isStale: Boolean!
  collectionValueId: String
}

"""
Represents an update to a `Triple`. Fields that are set will be updated.
"""
input TriplePatch {
  id: String
  entityId: String
  attributeId: String
  valueType: String
  valueId: String
  numberValue: String
  stringValue: String
  arrayValue: String
  entityValueId: String
  isProtected: Boolean
  spaceId: String
  createdAt: Int
  createdAtBlock: Int
  isStale: Boolean
  collectionValueId: String
}

"""A connection to a list of `Triple` values."""
type TriplesConnection {
  """A list of `Triple` objects."""
  nodes: [Triple]!

  """
  A list of edges which contains the `Triple` and cursor to aid in pagination.
  """
  edges: [TriplesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Triple` you could get from the connection."""
  totalCount: Int!
}

"""A `Triple` edge in the connection."""
type TriplesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Triple` at the end of the edge."""
  node: Triple
}

"""Methods to use when ordering `Triple`."""
enum TriplesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  VALUE_TYPE_ASC
  VALUE_TYPE_DESC
  VALUE_ID_ASC
  VALUE_ID_DESC
  NUMBER_VALUE_ASC
  NUMBER_VALUE_DESC
  STRING_VALUE_ASC
  STRING_VALUE_DESC
  ARRAY_VALUE_ASC
  ARRAY_VALUE_DESC
  ENTITY_VALUE_ID_ASC
  ENTITY_VALUE_ID_DESC
  IS_PROTECTED_ASC
  IS_PROTECTED_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  IS_STALE_ASC
  IS_STALE_DESC
  COLLECTION_VALUE_ID_ASC
  COLLECTION_VALUE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__ID_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__ID_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__NAME_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__NAME_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ATTRIBUTE_ID__UPDATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_VALUE_ID__UPDATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  COLLECTION_BY_COLLECTION_VALUE_ID__ID_ASC
  COLLECTION_BY_COLLECTION_VALUE_ID__ID_DESC
  COLLECTION_BY_COLLECTION_VALUE_ID__ENTITY_ID_ASC
  COLLECTION_BY_COLLECTION_VALUE_ID__ENTITY_ID_DESC
  TRIPLE_VERSIONS_BY_TRIPLE_ID__COUNT_ASC
  TRIPLE_VERSIONS_BY_TRIPLE_ID__COUNT_DESC
}

"""
A filter to be used against many `TripleVersion` object types. All fields are combined with a logical ‘and.’
"""
input TripleToManyTripleVersionFilter {
  """
  Every related `TripleVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TripleVersionFilter

  """
  Some related `TripleVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TripleVersionFilter

  """
  No related `TripleVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TripleVersionFilter
}

type TripleVersion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tripleId: String!
  versionId: String!

  """Reads a single `Triple` that is related to this `TripleVersion`."""
  triple: Triple

  """Reads a single `Version` that is related to this `TripleVersion`."""
  version: Version
}

"""
A condition to be used against `TripleVersion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TripleVersionCondition {
  """Checks for equality with the object’s `tripleId` field."""
  tripleId: String

  """Checks for equality with the object’s `versionId` field."""
  versionId: String
}

"""
A filter to be used against `TripleVersion` object types. All fields are combined with a logical ‘and.’
"""
input TripleVersionFilter {
  """Filter by the object’s `tripleId` field."""
  tripleId: StringFilter

  """Filter by the object’s `versionId` field."""
  versionId: StringFilter

  """Filter by the object’s `triple` relation."""
  triple: TripleFilter

  """Filter by the object’s `version` relation."""
  version: VersionFilter

  """Checks for all expressions in this list."""
  and: [TripleVersionFilter!]

  """Checks for any expressions in this list."""
  or: [TripleVersionFilter!]

  """Negates the expression."""
  not: TripleVersionFilter
}

"""An input for mutations affecting `TripleVersion`"""
input TripleVersionInput {
  tripleId: String!
  versionId: String!
}

"""
Represents an update to a `TripleVersion`. Fields that are set will be updated.
"""
input TripleVersionPatch {
  tripleId: String
  versionId: String
}

"""A connection to a list of `TripleVersion` values."""
type TripleVersionsConnection {
  """A list of `TripleVersion` objects."""
  nodes: [TripleVersion]!

  """
  A list of edges which contains the `TripleVersion` and cursor to aid in pagination.
  """
  edges: [TripleVersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TripleVersion` you could get from the connection."""
  totalCount: Int!
}

"""A `TripleVersion` edge in the connection."""
type TripleVersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TripleVersion` at the end of the edge."""
  node: TripleVersion
}

"""Methods to use when ordering `TripleVersion`."""
enum TripleVersionsOrderBy {
  NATURAL
  TRIPLE_ID_ASC
  TRIPLE_ID_DESC
  VERSION_ID_ASC
  VERSION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TRIPLE_BY_TRIPLE_ID__ID_ASC
  TRIPLE_BY_TRIPLE_ID__ID_DESC
  TRIPLE_BY_TRIPLE_ID__ENTITY_ID_ASC
  TRIPLE_BY_TRIPLE_ID__ENTITY_ID_DESC
  TRIPLE_BY_TRIPLE_ID__ATTRIBUTE_ID_ASC
  TRIPLE_BY_TRIPLE_ID__ATTRIBUTE_ID_DESC
  TRIPLE_BY_TRIPLE_ID__VALUE_TYPE_ASC
  TRIPLE_BY_TRIPLE_ID__VALUE_TYPE_DESC
  TRIPLE_BY_TRIPLE_ID__VALUE_ID_ASC
  TRIPLE_BY_TRIPLE_ID__VALUE_ID_DESC
  TRIPLE_BY_TRIPLE_ID__NUMBER_VALUE_ASC
  TRIPLE_BY_TRIPLE_ID__NUMBER_VALUE_DESC
  TRIPLE_BY_TRIPLE_ID__STRING_VALUE_ASC
  TRIPLE_BY_TRIPLE_ID__STRING_VALUE_DESC
  TRIPLE_BY_TRIPLE_ID__ARRAY_VALUE_ASC
  TRIPLE_BY_TRIPLE_ID__ARRAY_VALUE_DESC
  TRIPLE_BY_TRIPLE_ID__ENTITY_VALUE_ID_ASC
  TRIPLE_BY_TRIPLE_ID__ENTITY_VALUE_ID_DESC
  TRIPLE_BY_TRIPLE_ID__IS_PROTECTED_ASC
  TRIPLE_BY_TRIPLE_ID__IS_PROTECTED_DESC
  TRIPLE_BY_TRIPLE_ID__SPACE_ID_ASC
  TRIPLE_BY_TRIPLE_ID__SPACE_ID_DESC
  TRIPLE_BY_TRIPLE_ID__CREATED_AT_ASC
  TRIPLE_BY_TRIPLE_ID__CREATED_AT_DESC
  TRIPLE_BY_TRIPLE_ID__CREATED_AT_BLOCK_ASC
  TRIPLE_BY_TRIPLE_ID__CREATED_AT_BLOCK_DESC
  TRIPLE_BY_TRIPLE_ID__IS_STALE_ASC
  TRIPLE_BY_TRIPLE_ID__IS_STALE_DESC
  TRIPLE_BY_TRIPLE_ID__COLLECTION_VALUE_ID_ASC
  TRIPLE_BY_TRIPLE_ID__COLLECTION_VALUE_ID_DESC
  VERSION_BY_VERSION_ID__ID_ASC
  VERSION_BY_VERSION_ID__ID_DESC
  VERSION_BY_VERSION_ID__NAME_ASC
  VERSION_BY_VERSION_ID__NAME_DESC
  VERSION_BY_VERSION_ID__DESCRIPTION_ASC
  VERSION_BY_VERSION_ID__DESCRIPTION_DESC
  VERSION_BY_VERSION_ID__CREATED_AT_ASC
  VERSION_BY_VERSION_ID__CREATED_AT_DESC
  VERSION_BY_VERSION_ID__CREATED_AT_BLOCK_ASC
  VERSION_BY_VERSION_ID__CREATED_AT_BLOCK_DESC
  VERSION_BY_VERSION_ID__CREATED_BY_ID_ASC
  VERSION_BY_VERSION_ID__CREATED_BY_ID_DESC
  VERSION_BY_VERSION_ID__PROPOSED_VERSION_ID_ASC
  VERSION_BY_VERSION_ID__PROPOSED_VERSION_ID_DESC
  VERSION_BY_VERSION_ID__ENTITY_ID_ASC
  VERSION_BY_VERSION_ID__ENTITY_ID_DESC
  VERSION_BY_VERSION_ID__SPACE_ID_ASC
  VERSION_BY_VERSION_ID__SPACE_ID_DESC
}

"""All input for the `updateAccountByNodeId` mutation."""
input UpdateAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
  id: String!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `updateActionByNodeId` mutation."""
input UpdateActionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  patch: ActionPatch!
}

"""All input for the `updateAction` mutation."""
input UpdateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  patch: ActionPatch!
  id: String!
}

"""The output of our update `Action` mutation."""
type UpdateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was updated by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Action`."""
  entityValue: GeoEntity

  """Reads a single `ProposedVersion` that is related to this `Action`."""
  proposedVersion: ProposedVersion

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the `updateCollectionByNodeId` mutation."""
input UpdateCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
}

"""All input for the `updateCollection` mutation."""
input UpdateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  id: String!
}

"""The output of our update `Collection` mutation."""
type UpdateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was updated by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Collection`."""
  entity: GeoEntity

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""All input for the `updateGeoEntityByNodeId` mutation."""
input UpdateGeoEntityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeoEntity` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GeoEntity` being updated.
  """
  patch: GeoEntityPatch!
}

"""All input for the `updateGeoEntity` mutation."""
input UpdateGeoEntityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GeoEntity` being updated.
  """
  patch: GeoEntityPatch!
  id: String!
}

"""The output of our update `GeoEntity` mutation."""
type UpdateGeoEntityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoEntity` that was updated by this mutation."""
  geoEntity: GeoEntity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `GeoEntity`."""
  createdBy: Account

  """An edge for our `GeoEntity`. May be used by Relay 1."""
  geoEntityEdge(
    """The method to use when ordering `GeoEntity`."""
    orderBy: [GeoEntitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoEntitiesEdge
}

"""All input for the `updateGeoEntityTypeByEntityIdAndTypeId` mutation."""
input UpdateGeoEntityTypeByEntityIdAndTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GeoEntityType` being updated.
  """
  patch: GeoEntityTypePatch!
  entityId: String!
  typeId: String!
}

"""All input for the `updateGeoEntityTypeByNodeId` mutation."""
input UpdateGeoEntityTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeoEntityType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GeoEntityType` being updated.
  """
  patch: GeoEntityTypePatch!
}

"""All input for the `updateGeoEntityType` mutation."""
input UpdateGeoEntityTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GeoEntityType` being updated.
  """
  patch: GeoEntityTypePatch!
  id: Int!
}

"""The output of our update `GeoEntityType` mutation."""
type UpdateGeoEntityTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoEntityType` that was updated by this mutation."""
  geoEntityType: GeoEntityType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `GeoEntityType`."""
  type: GeoEntity

  """An edge for our `GeoEntityType`. May be used by Relay 1."""
  geoEntityTypeEdge(
    """The method to use when ordering `GeoEntityType`."""
    orderBy: [GeoEntityTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoEntityTypesEdge
}

"""All input for the `updateLogEntryByNodeId` mutation."""
input UpdateLogEntryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LogEntry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LogEntry` being updated.
  """
  patch: LogEntryPatch!
}

"""All input for the `updateLogEntry` mutation."""
input UpdateLogEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LogEntry` being updated.
  """
  patch: LogEntryPatch!
  id: String!
}

"""The output of our update `LogEntry` mutation."""
type UpdateLogEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LogEntry` that was updated by this mutation."""
  logEntry: LogEntry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `LogEntry`."""
  createdBy: Account

  """Reads a single `Space` that is related to this `LogEntry`."""
  space: Space

  """An edge for our `LogEntry`. May be used by Relay 1."""
  logEntryEdge(
    """The method to use when ordering `LogEntry`."""
    orderBy: [LogEntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogEntriesEdge
}

"""All input for the `updateOnchainProfileByNodeId` mutation."""
input UpdateOnchainProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OnchainProfile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OnchainProfile` being updated.
  """
  patch: OnchainProfilePatch!
}

"""All input for the `updateOnchainProfile` mutation."""
input UpdateOnchainProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OnchainProfile` being updated.
  """
  patch: OnchainProfilePatch!
  id: String!
}

"""The output of our update `OnchainProfile` mutation."""
type UpdateOnchainProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OnchainProfile` that was updated by this mutation."""
  onchainProfile: OnchainProfile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `OnchainProfile`."""
  account: Account

  """Reads a single `Space` that is related to this `OnchainProfile`."""
  homeSpace: Space

  """An edge for our `OnchainProfile`. May be used by Relay 1."""
  onchainProfileEdge(
    """The method to use when ordering `OnchainProfile`."""
    orderBy: [OnchainProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OnchainProfilesEdge
}

"""All input for the `updateProfileByNodeId` mutation."""
input UpdateProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
}

"""All input for the `updateProfile` mutation."""
input UpdateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  id: String!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Profile`."""
  entity: GeoEntity

  """Reads a single `OnchainProfile` that is related to this `Profile`."""
  onchainProfile: OnchainProfile

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""All input for the `updateProposalByNodeId` mutation."""
input UpdateProposalByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Proposal` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Proposal` being updated.
  """
  patch: ProposalPatch!
}

"""All input for the `updateProposal` mutation."""
input UpdateProposalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Proposal` being updated.
  """
  patch: ProposalPatch!
  id: String!
}

"""The output of our update `Proposal` mutation."""
type UpdateProposalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Proposal` that was updated by this mutation."""
  proposal: Proposal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Proposal`."""
  space: Space

  """Reads a single `Account` that is related to this `Proposal`."""
  createdBy: Account

  """An edge for our `Proposal`. May be used by Relay 1."""
  proposalEdge(
    """The method to use when ordering `Proposal`."""
    orderBy: [ProposalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposalsEdge
}

"""All input for the `updateProposalVoteByNodeId` mutation."""
input UpdateProposalVoteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProposalVote` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProposalVote` being updated.
  """
  patch: ProposalVotePatch!
}

"""All input for the `updateProposalVote` mutation."""
input UpdateProposalVoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProposalVote` being updated.
  """
  patch: ProposalVotePatch!
  onchainProposalId: String!
  spaceId: String!
  accountId: String!
}

"""The output of our update `ProposalVote` mutation."""
type UpdateProposalVotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposalVote` that was updated by this mutation."""
  proposalVote: ProposalVote

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Proposal` that is related to this `ProposalVote`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposalVote`."""
  space: Space

  """Reads a single `Account` that is related to this `ProposalVote`."""
  account: Account

  """An edge for our `ProposalVote`. May be used by Relay 1."""
  proposalVoteEdge(
    """The method to use when ordering `ProposalVote`."""
    orderBy: [ProposalVotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposalVotesEdge
}

"""All input for the `updateProposedVersionByNodeId` mutation."""
input UpdateProposedVersionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProposedVersion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProposedVersion` being updated.
  """
  patch: ProposedVersionPatch!
}

"""All input for the `updateProposedVersion` mutation."""
input UpdateProposedVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProposedVersion` being updated.
  """
  patch: ProposedVersionPatch!
  id: String!
}

"""The output of our update `ProposedVersion` mutation."""
type UpdateProposedVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposedVersion` that was updated by this mutation."""
  proposedVersion: ProposedVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `ProposedVersion`."""
  createdBy: Account

  """Reads a single `GeoEntity` that is related to this `ProposedVersion`."""
  entity: GeoEntity

  """Reads a single `Proposal` that is related to this `ProposedVersion`."""
  proposal: Proposal

  """Reads a single `Space` that is related to this `ProposedVersion`."""
  space: Space

  """An edge for our `ProposedVersion`. May be used by Relay 1."""
  proposedVersionEdge(
    """The method to use when ordering `ProposedVersion`."""
    orderBy: [ProposedVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProposedVersionsEdge
}

"""All input for the `updateSpaceAdminByAccountIdAndSpaceId` mutation."""
input UpdateSpaceAdminByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpaceAdmin` being updated.
  """
  patch: SpaceAdminPatch!
  accountId: String!
  spaceId: String!
}

"""The output of our update `SpaceAdmin` mutation."""
type UpdateSpaceAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceAdmin` that was updated by this mutation."""
  spaceAdmin: SpaceAdmin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceAdmin`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceAdmin`."""
  account: Account

  """An edge for our `SpaceAdmin`. May be used by Relay 1."""
  spaceAdminEdge(
    """The method to use when ordering `SpaceAdmin`."""
    orderBy: [SpaceAdminsOrderBy!] = [NATURAL]
  ): SpaceAdminsEdge
}

"""All input for the `updateSpaceByNodeId` mutation."""
input UpdateSpaceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Space` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Space` being updated.
  """
  patch: SpacePatch!
}

"""All input for the `updateSpaceEditorByAccountIdAndSpaceId` mutation."""
input UpdateSpaceEditorByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpaceEditor` being updated.
  """
  patch: SpaceEditorPatch!
  accountId: String!
  spaceId: String!
}

"""
All input for the `updateSpaceEditorControllerByAccountIdAndSpaceId` mutation.
"""
input UpdateSpaceEditorControllerByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpaceEditorController` being updated.
  """
  patch: SpaceEditorControllerPatch!
  accountId: String!
  spaceId: String!
}

"""The output of our update `SpaceEditorController` mutation."""
type UpdateSpaceEditorControllerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditorController` that was updated by this mutation."""
  spaceEditorController: SpaceEditorController

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Space` that is related to this `SpaceEditorController`.
  """
  space: Space

  """
  Reads a single `Account` that is related to this `SpaceEditorController`.
  """
  account: Account

  """An edge for our `SpaceEditorController`. May be used by Relay 1."""
  spaceEditorControllerEdge(
    """The method to use when ordering `SpaceEditorController`."""
    orderBy: [SpaceEditorControllersOrderBy!] = [NATURAL]
  ): SpaceEditorControllersEdge
}

"""The output of our update `SpaceEditor` mutation."""
type UpdateSpaceEditorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditor` that was updated by this mutation."""
  spaceEditor: SpaceEditor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceEditor`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditor`."""
  account: Account

  """An edge for our `SpaceEditor`. May be used by Relay 1."""
  spaceEditorEdge(
    """The method to use when ordering `SpaceEditor`."""
    orderBy: [SpaceEditorsOrderBy!] = [NATURAL]
  ): SpaceEditorsEdge
}

"""
All input for the `updateSpaceEditorsV2ByAccountIdAndSpaceId` mutation.
"""
input UpdateSpaceEditorsV2ByAccountIdAndSpaceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpaceEditorsV2` being updated.
  """
  patch: SpaceEditorsV2Patch!
  accountId: String!
  spaceId: String!
}

"""The output of our update `SpaceEditorsV2` mutation."""
type UpdateSpaceEditorsV2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpaceEditorsV2` that was updated by this mutation."""
  spaceEditorsV2: SpaceEditorsV2

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `SpaceEditorsV2`."""
  space: Space

  """Reads a single `Account` that is related to this `SpaceEditorsV2`."""
  account: Account

  """An edge for our `SpaceEditorsV2`. May be used by Relay 1."""
  spaceEditorsV2Edge(
    """The method to use when ordering `SpaceEditorsV2`."""
    orderBy: [SpaceEditorsV2sOrderBy!] = [NATURAL]
  ): SpaceEditorsV2sEdge
}

"""All input for the `updateSpace` mutation."""
input UpdateSpaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Space` being updated.
  """
  patch: SpacePatch!
  id: String!
}

"""The output of our update `Space` mutation."""
type UpdateSpacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Space` that was updated by this mutation."""
  space: Space

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Space`."""
  configuration: GeoEntity

  """An edge for our `Space`. May be used by Relay 1."""
  spaceEdge(
    """The method to use when ordering `Space`."""
    orderBy: [SpacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpacesEdge
}

"""All input for the `updateSubspaceByNodeId` mutation."""
input UpdateSubspaceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Subspace` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Subspace` being updated.
  """
  patch: SubspacePatch!
}

"""All input for the `updateSubspace` mutation."""
input UpdateSubspaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Subspace` being updated.
  """
  patch: SubspacePatch!
  id: String!
}

"""The output of our update `Subspace` mutation."""
type UpdateSubspacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Subspace` that was updated by this mutation."""
  subspace: Subspace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Space` that is related to this `Subspace`."""
  parentSpace: Space

  """Reads a single `Space` that is related to this `Subspace`."""
  childSpace: Space

  """An edge for our `Subspace`. May be used by Relay 1."""
  subspaceEdge(
    """The method to use when ordering `Subspace`."""
    orderBy: [SubspacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubspacesEdge
}

"""All input for the `updateSubstreamCursorByNodeId` mutation."""
input UpdateSubstreamCursorByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SubstreamCursor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SubstreamCursor` being updated.
  """
  patch: SubstreamCursorPatch!
}

"""All input for the `updateSubstreamCursor` mutation."""
input UpdateSubstreamCursorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SubstreamCursor` being updated.
  """
  patch: SubstreamCursorPatch!
  id: Int!
}

"""The output of our update `SubstreamCursor` mutation."""
type UpdateSubstreamCursorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SubstreamCursor` that was updated by this mutation."""
  substreamCursor: SubstreamCursor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SubstreamCursor`. May be used by Relay 1."""
  substreamCursorEdge(
    """The method to use when ordering `SubstreamCursor`."""
    orderBy: [SubstreamCursorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubstreamCursorsEdge
}

"""All input for the `updateTripleByNodeId` mutation."""
input UpdateTripleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Triple` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Triple` being updated.
  """
  patch: TriplePatch!
}

"""All input for the `updateTriple` mutation."""
input UpdateTripleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Triple` being updated.
  """
  patch: TriplePatch!
  id: String!
}

"""The output of our update `Triple` mutation."""
type UpdateTriplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Triple` that was updated by this mutation."""
  triple: Triple

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entity: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  attribute: GeoEntity

  """Reads a single `GeoEntity` that is related to this `Triple`."""
  entityValue: GeoEntity

  """Reads a single `Space` that is related to this `Triple`."""
  space: Space

  """Reads a single `Collection` that is related to this `Triple`."""
  collectionValue: Collection

  """An edge for our `Triple`. May be used by Relay 1."""
  tripleEdge(
    """The method to use when ordering `Triple`."""
    orderBy: [TriplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TriplesEdge
}

"""All input for the `updateTripleVersionByNodeId` mutation."""
input UpdateTripleVersionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TripleVersion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TripleVersion` being updated.
  """
  patch: TripleVersionPatch!
}

"""All input for the `updateTripleVersion` mutation."""
input UpdateTripleVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TripleVersion` being updated.
  """
  patch: TripleVersionPatch!
  tripleId: String!
  versionId: String!
}

"""The output of our update `TripleVersion` mutation."""
type UpdateTripleVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TripleVersion` that was updated by this mutation."""
  tripleVersion: TripleVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Triple` that is related to this `TripleVersion`."""
  triple: Triple

  """Reads a single `Version` that is related to this `TripleVersion`."""
  version: Version

  """An edge for our `TripleVersion`. May be used by Relay 1."""
  tripleVersionEdge(
    """The method to use when ordering `TripleVersion`."""
    orderBy: [TripleVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TripleVersionsEdge
}

"""All input for the `updateVersionByNodeId` mutation."""
input UpdateVersionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Version` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Version` being updated.
  """
  patch: VersionPatch!
}

"""All input for the `updateVersion` mutation."""
input UpdateVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Version` being updated.
  """
  patch: VersionPatch!
  id: String!
}

"""The output of our update `Version` mutation."""
type UpdateVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Version` that was updated by this mutation."""
  version: Version

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `Version`."""
  createdBy: Account

  """Reads a single `ProposedVersion` that is related to this `Version`."""
  proposedVersion: ProposedVersion

  """Reads a single `GeoEntity` that is related to this `Version`."""
  entity: GeoEntity

  """Reads a single `Space` that is related to this `Version`."""
  space: Space

  """An edge for our `Version`. May be used by Relay 1."""
  versionEdge(
    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VersionsEdge
}

type Version implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String
  description: String
  createdAt: Int!
  createdAtBlock: Int!
  createdById: String!
  proposedVersionId: String!
  entityId: String!
  spaceId: String!

  """Reads a single `Account` that is related to this `Version`."""
  createdBy: Account

  """Reads a single `ProposedVersion` that is related to this `Version`."""
  proposedVersion: ProposedVersion

  """Reads a single `GeoEntity` that is related to this `Version`."""
  entity: GeoEntity

  """Reads a single `Space` that is related to this `Version`."""
  space: Space

  """Reads and enables pagination through a set of `TripleVersion`."""
  tripleVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TripleVersion`."""
    orderBy: [TripleVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TripleVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TripleVersionFilter
  ): TripleVersionsConnection!
}

"""
A condition to be used against `Version` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input VersionCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Int

  """Checks for equality with the object’s `createdAtBlock` field."""
  createdAtBlock: Int

  """Checks for equality with the object’s `createdById` field."""
  createdById: String

  """Checks for equality with the object’s `proposedVersionId` field."""
  proposedVersionId: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String

  """Checks for equality with the object’s `spaceId` field."""
  spaceId: String
}

"""
A filter to be used against `Version` object types. All fields are combined with a logical ‘and.’
"""
input VersionFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: IntFilter

  """Filter by the object’s `createdAtBlock` field."""
  createdAtBlock: IntFilter

  """Filter by the object’s `createdById` field."""
  createdById: StringFilter

  """Filter by the object’s `proposedVersionId` field."""
  proposedVersionId: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `spaceId` field."""
  spaceId: StringFilter

  """Filter by the object’s `tripleVersions` relation."""
  tripleVersions: VersionToManyTripleVersionFilter

  """Some related `tripleVersions` exist."""
  tripleVersionsExist: Boolean

  """Filter by the object’s `createdBy` relation."""
  createdBy: AccountFilter

  """Filter by the object’s `proposedVersion` relation."""
  proposedVersion: ProposedVersionFilter

  """Filter by the object’s `entity` relation."""
  entity: GeoEntityFilter

  """Filter by the object’s `space` relation."""
  space: SpaceFilter

  """Checks for all expressions in this list."""
  and: [VersionFilter!]

  """Checks for any expressions in this list."""
  or: [VersionFilter!]

  """Negates the expression."""
  not: VersionFilter
}

"""An input for mutations affecting `Version`"""
input VersionInput {
  id: String!
  name: String
  description: String
  createdAt: Int!
  createdAtBlock: Int!
  createdById: String!
  proposedVersionId: String!
  entityId: String!
  spaceId: String!
}

"""
Represents an update to a `Version`. Fields that are set will be updated.
"""
input VersionPatch {
  id: String
  name: String
  description: String
  createdAt: Int
  createdAtBlock: Int
  createdById: String
  proposedVersionId: String
  entityId: String
  spaceId: String
}

"""A connection to a list of `Version` values."""
type VersionsConnection {
  """A list of `Version` objects."""
  nodes: [Version]!

  """
  A list of edges which contains the `Version` and cursor to aid in pagination.
  """
  edges: [VersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Version` you could get from the connection."""
  totalCount: Int!
}

"""A `Version` edge in the connection."""
type VersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Version` at the end of the edge."""
  node: Version
}

"""Methods to use when ordering `Version`."""
enum VersionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_AT_BLOCK_ASC
  CREATED_AT_BLOCK_DESC
  CREATED_BY_ID_ASC
  CREATED_BY_ID_DESC
  PROPOSED_VERSION_ID_ASC
  PROPOSED_VERSION_ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  SPACE_ID_ASC
  SPACE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ACCOUNT_BY_CREATED_BY_ID__ID_ASC
  ACCOUNT_BY_CREATED_BY_ID__ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__NAME_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__NAME_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__DESCRIPTION_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__DESCRIPTION_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_BLOCK_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_AT_BLOCK_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_BY_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__CREATED_BY_ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ENTITY_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__ENTITY_ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__PROPOSAL_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__PROPOSAL_ID_DESC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__SPACE_ID_ASC
  PROPOSED_VERSION_BY_PROPOSED_VERSION_ID__SPACE_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__NAME_ASC
  GEO_ENTITY_BY_ENTITY_ID__NAME_DESC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_ASC
  GEO_ENTITY_BY_ENTITY_ID__DESCRIPTION_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_BY_ID_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__CREATED_AT_BLOCK_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_DESC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_ASC
  GEO_ENTITY_BY_ENTITY_ID__UPDATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__ID_ASC
  SPACE_BY_SPACE_ID__ID_DESC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_ASC
  SPACE_BY_SPACE_ID__CREATED_AT_BLOCK_DESC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_ASC
  SPACE_BY_SPACE_ID__IS_ROOT_SPACE_DESC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__SPACE_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MAIN_VOTING_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_ASC
  SPACE_BY_SPACE_ID__MEMBER_ACCESS_PLUGIN_ADDRESS_DESC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_ASC
  SPACE_BY_SPACE_ID__CONFIGURATION_ID_DESC
  TRIPLE_VERSIONS_BY_VERSION_ID__COUNT_ASC
  TRIPLE_VERSIONS_BY_VERSION_ID__COUNT_DESC
}

"""
A filter to be used against many `TripleVersion` object types. All fields are combined with a logical ‘and.’
"""
input VersionToManyTripleVersionFilter {
  """
  Every related `TripleVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TripleVersionFilter

  """
  Some related `TripleVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TripleVersionFilter

  """
  No related `TripleVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TripleVersionFilter
}

enum VoteType {
  YES
  NO
}

"""
A filter to be used against VoteType fields. All fields are combined with a logical ‘and.’
"""
input VoteTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: VoteType

  """Not equal to the specified value."""
  notEqualTo: VoteType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: VoteType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: VoteType

  """Included in the specified list."""
  in: [VoteType!]

  """Not included in the specified list."""
  notIn: [VoteType!]

  """Less than the specified value."""
  lessThan: VoteType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: VoteType

  """Greater than the specified value."""
  greaterThan: VoteType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: VoteType
}

